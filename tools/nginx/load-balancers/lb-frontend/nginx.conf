# =================================================================================================
# NGINX Load Balancer Configuration - Frontend
# =================================================================================================
#
# Shared logging formats and settings
include /etc/nginx/snippets/logging.conf;

# This load balancer handles traffic for frontend applications (Next.js app).
# It distributes requests across multiple frontend application instances.
#
# Architecture:
# - Receives traffic from the edge proxy on port 8080
# - Load balances requests to frontend application instances
# - Supports static asset serving and Next.js dynamic routes
# - Implements health checks and failover
#
# =================================================================================================

# Upstream Configuration - Frontend Application Pool
# Defines the pool of frontend application instances

upstream frontend_apps {
    # Shared memory zone for statistics and health checks
    zone frontend_apps 64k;

    # Load balancing method: least_conn
    # Distributes new connections to the server with the least number of active connections
    # This is ideal for applications with varying request processing times
    least_conn;

    # Frontend application instances
    # In Docker Compose, these resolve to container names
    # In production, these would be actual server IPs or hostnames

    # Primary frontend instance
    server my-programs-app:3000 max_fails=3 fail_timeout=30s weight=1;

    # Additional instances for horizontal scaling
    # Uncomment and configure when scaling horizontally:
    # server my-programs-app-2:3000 max_fails=3 fail_timeout=30s weight=1;
    # server my-programs-app-3:3000 max_fails=3 fail_timeout=30s weight=1;

    # Backup server (optional)
    # This server only receives traffic when all primary servers are down
    # server my-programs-app-backup:3000 backup;

    # Keep-alive connections to upstream servers
    # Improves performance by reusing connections
    keepalive 32;
    keepalive_timeout 60s;
    keepalive_requests 100;
}

# Server Block - Load Balancer Frontend
server {
    listen 8080;
    listen [::]:8080;

    # Server name for this load balancer
    server_name lb-frontend;

    # Include security headers
    include /etc/nginx/snippets/headers.conf;

    # Add custom header to identify this load balancer
    add_header X-Load-Balancer "lb-frontend" always;

    # Health check endpoint for this load balancer
    location /health {
        access_log off;
        return 200 "lb-frontend:healthy\n";
        add_header Content-Type text/plain;
    }

    # Upstream health check endpoint
    # Checks if upstream servers are responding
    location /upstream/health {
        access_log off;
        proxy_pass http://frontend_apps/api/health;
        proxy_connect_timeout 2s;
        proxy_read_timeout 2s;
    }

    # Next.js API routes
    # These are handled by the Next.js server
    location /api/ {
        proxy_pass http://frontend_apps;

        # Preserve original request information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support for Next.js HMR (Hot Module Replacement)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Buffering configuration
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # Timeout configuration
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
    }

    # Next.js image optimization endpoint
    location /_next/image {
        proxy_pass http://frontend_apps;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Image optimization may take longer
        proxy_connect_timeout 90s;
        proxy_send_timeout 90s;
        proxy_read_timeout 90s;

        # Enable caching for optimized images
        proxy_cache_valid 200 7d;
        proxy_cache_valid 404 1m;
    }

    # Next.js static assets (built assets)
    location /_next/static/ {
        proxy_pass http://frontend_apps;
        proxy_set_header Host $host;

        # Static assets can be cached aggressively
        # Next.js uses content hashes in filenames, so cache can be long-lived
        add_header Cache-Control "public, max-age=31536000, immutable";

        # Enable compression
        gzip_static on;

        expires 1y;
    }

    # Public static assets
    location /static/ {
        proxy_pass http://frontend_apps;
        proxy_set_header Host $host;

        # Cache static assets
        add_header Cache-Control "public, max-age=86400";
        expires 1d;
    }

    # Main application routes
    # All other requests are proxied to the Next.js application
    location / {
        proxy_pass http://frontend_apps;

        # Preserve original request information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $request_uri;

        # WebSocket support for Next.js HMR and real-time features
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Buffering configuration
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # Timeout configuration
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;

        # Next.js handles all routing internally
        # Don't try to serve files directly
        try_files $uri @nextjs;
    }

    # Named location for Next.js routing
    location @nextjs {
        proxy_pass http://frontend_apps;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error page location
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# WebSocket upgrade connection mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Include environment-specific overlays
include /etc/nginx/conf.d/overlays/*.conf;
