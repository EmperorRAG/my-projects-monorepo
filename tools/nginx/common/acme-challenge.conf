# =================================================================================================
# ACME Challenge Configuration for Let's Encrypt
# =================================================================================================
#
# This configuration provides the necessary location blocks for Let's Encrypt ACME HTTP-01
# challenge validation. Include this file in your server blocks to support automatic
# certificate acquisition and renewal.
#
# The ACME HTTP-01 challenge requires that Let's Encrypt can access a specific URL on your
# domain to verify ownership:
#   http://yourdomain.com/.well-known/acme-challenge/<token>
#
# This configuration ensures:
# - ACME challenges are served from the correct directory
# - Proper permissions and access controls
# - Logging for debugging
# - Compatibility with certbot webroot plugin
#
# Usage:
#   In your server block, include this file:
#   
#   server {
#       listen 80;
#       server_name yourdomain.com;
#       
#       # Include ACME challenge support
#       include /etc/nginx/common/acme-challenge.conf;
#       
#       # ... rest of configuration
#   }
#
# =================================================================================================

# ACME Challenge Location Block
# Serves files for Let's Encrypt domain validation
location ^~ /.well-known/acme-challenge/ {
    # Root directory for ACME challenges
    # This should match the webroot path used by certbot
    root /var/www/certbot;
    
    # Allow access to challenge files
    allow all;
    
    # Default file type
    default_type "text/plain";
    
    # Disable access logging for challenge requests (reduces log noise)
    # Uncomment if you want to log these requests for debugging
    # access_log /var/log/nginx/acme-challenge.log;
    access_log off;
    
    # Disable error logging for not found files (normal during renewal)
    # Uncomment if you want to log errors for debugging
    # error_log /var/log/nginx/acme-challenge-error.log;
    log_not_found off;
    
    # Serve files directly, no processing
    try_files $uri =404;
    
    # Security: Prevent execution of any scripts
    location ~ \.(php|jsp|asp|cgi|pl|py)$ {
        deny all;
    }
}

# Deny access to the parent .well-known directory
# (Only allow access to acme-challenge subdirectory)
location = /.well-known/ {
    deny all;
    return 404;
}

# =================================================================================================
# Configuration Notes
# =================================================================================================
#
# 1. Webroot Directory:
#    - The webroot must be accessible and writable by certbot
#    - Default: /var/www/certbot
#    - Ensure this directory exists and has proper permissions
#    - Certbot will create subdirectories as needed
#
# 2. Docker Integration:
#    - Mount the webroot as a shared volume between certbot and nginx
#    - Example in docker-compose.yaml:
#      volumes:
#        - certbot-webroot:/var/www/certbot
#
# 3. Security Considerations:
#    - Only text files should be served from this location
#    - No script execution is allowed
#    - Access is restricted to the acme-challenge subdirectory
#    - Files are served as-is with no processing
#
# 4. Troubleshooting:
#    - Verify the webroot directory exists:
#      ls -la /var/www/certbot/.well-known/acme-challenge/
#
#    - Test accessibility:
#      curl http://yourdomain.com/.well-known/acme-challenge/test
#
#    - Check NGINX error logs:
#      tail -f /var/log/nginx/error.log
#
#    - Validate certbot can write to webroot:
#      touch /var/www/certbot/.well-known/acme-challenge/test
#
# 5. Certificate Acquisition:
#    - Certbot command for HTTP-01 challenge:
#      certbot certonly --webroot --webroot-path=/var/www/certbot \
#        -d yourdomain.com --email your@email.com --agree-tos
#
# 6. Renewal:
#    - Certbot will automatically use this configuration for renewals
#    - Ensure NGINX is running during renewal
#    - Set up a cron job or systemd timer for automatic renewal
#
# =================================================================================================

# =================================================================================================
# Advanced Configuration
# =================================================================================================

# Optional: Add rate limiting for ACME requests to prevent abuse
# Uncomment if experiencing issues with excessive requests
# limit_req_zone $binary_remote_addr zone=acme_limit:10m rate=10r/s;
# limit_req zone=acme_limit burst=20 nodelay;

# Optional: Add specific logging for debugging
# access_log /var/log/nginx/acme-challenge-access.log combined;
# error_log /var/log/nginx/acme-challenge-error.log warn;

# Optional: Custom headers for ACME responses
# add_header X-ACME-Challenge "active" always;
# add_header Cache-Control "no-cache, no-store, must-revalidate" always;

# =================================================================================================
