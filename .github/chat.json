{
  "requesterUsername": "EmperorRAG",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/25556899",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "panel",
  "requests": [
    {
      "requestId": "request_384973ab-12d0-48aa-94d9-af15e5e83b46",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 201
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 202
            },
            "text": "What do I need to consider if I were to make a nest.js node server that implemented better-auth to provide the functionality for a centralized account management, authorization and verification system?",
            "kind": "text"
          }
        ],
        "text": "What do I need to consider if I were to make a nest.js node server that implemented better-auth to provide the functionality for a centralized account management, authorization and verification system?"
      },
      "variableData": {
        "variables": [
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/a11y.instructions.md",
            "name": "prompt:a11y.instructions.md",
            "value": {
              "$mid": 1,
              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\a11y.instructions.md",
              "_sep": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/a11y.instructions.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/a11y.instructions.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as pattern is **",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/codacy.instructions.md",
            "name": "prompt:codacy.instructions.md",
            "value": {
              "$mid": 1,
              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\codacy.instructions.md",
              "_sep": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/codacy.instructions.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/codacy.instructions.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as pattern is **",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/devops-core-principles.instructions.md",
            "name": "prompt:devops-core-principles.instructions.md",
            "value": {
              "$mid": 1,
              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\devops-core-principles.instructions.md",
              "_sep": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/devops-core-principles.instructions.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/devops-core-principles.instructions.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as pattern is **",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/performance-optimization.instructions.md",
            "name": "prompt:performance-optimization.instructions.md",
            "value": {
              "$mid": 1,
              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\performance-optimization.instructions.md",
              "_sep": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/performance-optimization.instructions.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/performance-optimization.instructions.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as pattern is **",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/copilot-instructions.md",
            "name": "prompt:copilot-instructions.md",
            "value": {
              "$mid": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/copilot-instructions.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/copilot-instructions.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as setting github.copilot.chat.codeGeneration.useInstructionFiles is enabled",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.root__file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/AGENTS.md",
            "name": "prompt:AGENTS.md",
            "value": {
              "$mid": 1,
              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/AGENTS.md",
              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/AGENTS.md",
              "scheme": "file"
            },
            "kind": "promptFile",
            "modelDescription": "Prompt instructions file",
            "isRoot": true,
            "originLabel": "Automatically attached as setting chat.useAgentsMdFile is enabled",
            "automaticallyAdded": true
          },
          {
            "id": "vscode.prompt.instructions.text",
            "name": "prompt:instructionsList",
            "value": "Here is a list of instruction files that contain rules for modifying or creating new code.\nThese files are important for ensuring that the code is modified or created correctly.\nPlease make sure to follow the rules specified in these files when working with the codebase.\nIf the file is not already available as attachment, use the `read_file` tool to acquire it.\nMake sure to acquire the instructions before making any changes to the code.\n| File | Applies To | Description |\n| ------- | --------- | ----------- |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\a11y.instructions.md' | ** | Guidance for creating more accessible code |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\ai-prompt-engineering-safety-best-practices.instructions.md' | '**/*' | Comprehensive best practices for AI prompt engineering, safety frameworks, bias mitigation, and responsible AI usage for Copilot and LLMs. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\codacy.addendum.instructions.md' | **/*.md | Addendum that prevents Codacy tool usage on Markdown content. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\codacy.instructions.md' | ** | Configuration for AI behavior when interacting with Codacy's MCP Server |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\conventional-commit.instructions.md' | **/* | Provides a comprehensive guide to the Conventional Commits 1.0.0 specification. Includes the standard format, structural elements (feat, fix, BREAKING CHANGE), detailed examples, the full specification, and an FAQ for creating a structured and explicit commit history. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\devops-core-principles.instructions.md' | * | Foundational instructions covering core DevOps principles, culture (CALMS), and key metrics (DORA) to guide GitHub Copilot in understanding and promoting effective software delivery. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\docker.instructions.md' | **/Dockerfile,**/Dockerfile.*,**/*.dockerfile,**/docker-compose*.yml,**/docker-compose*.yaml | Modular index for Docker and containerization guidance. Modules target Dockerfiles, Compose files, and runtime operations. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\docs.instructions.md' | docs/**/*.md |  |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\fp-paradigm.instructions.md' | **/*.ts | Functional Programming paradigm guidelines for TypeScript using Effect-TS |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\kubernetes.instructions.md' | **/kubernetes/**/*.yaml,**/kubernetes/**/*.yml,**/*k8s*.yaml,**/*k8s*.yml,**/*kube*.yaml,**/*kube*.yml | Modular index for Kubernetes deployment guidance. Each module covers a focused topic spanning core concepts, configuration, security, operations, and troubleshooting. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\markdown.instructions.md' | **/*.md | Documentation and content creation standards |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\nestjs.instructions.md' | services/**/*.ts,services/**/*.js,services/**/*.json,services/**/*.spec.ts,services/**/*.e2e-spec.ts,libs/**/*.ts,libs/**/*.js,libs/**/*.json,libs/**/*.spec.ts,libs/**/*.e2e-spec.ts | NestJS development standards and best practices for building scalable Node.js server-side applications |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\nextjs.instructions.md' | apps/**/app/**/*.{ts,tsx,js,jsx},apps/**/app/** |  |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\performance-optimization.instructions.md' | * | The most comprehensive, practical, and engineer-authored performance optimization instructions for all languages, frameworks, and stacks. Covers frontend, backend, and database best practices with actionable guidance, scenario-based checklists, troubleshooting, and pro tips. |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\playwright.instructions.md' | apps/**/*-e2e/**/*.spec.ts,services/**/*-e2e/**/*.spec.ts | Playwright test generation instructions |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\powershell.instructions.md' | **/*.ps1,**/*.psm1 | PowerShell cmdlet and scripting best practices based on Microsoft guidelines |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\python.instructions.md' | **/*.py | Python coding conventions and guidelines |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\reactjs.instructions.md' | apps/**/*.{jsx,tsx,js,ts,css,scss},libs/**/*.{jsx,tsx,js,ts,css,scss} | ReactJS development standards and best practices |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\sql-sp-generation.instructions.md' | **/*.sql | Guidelines for generating SQL statements and stored procedures |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\tailwind.instructions.md' | apps/**/*,libs/**/* |  |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\typescript.instructions.md' | **/*.ts | Guidelines for TypeScript Development targeting TypeScript 5.x and ES2022 output |\n| 'c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\AGENTS.md' |    | Instructions for the workspace |",
            "kind": "promptText",
            "modelDescription": "Prompt instructions list",
            "automaticallyAdded": true
          }
        ]
      },
      "response": [
        {
          "kind": "progressTaskSerialized",
          "content": {
            "value": "Optimizing tool selection...",
            "uris": {}
          },
          "progress": []
        },
        {
          "value": "I'll help you understand the key considerations for building a centralized authentication system using NestJS and Better Auth. Let me first gather some information about your current setup and then provide comprehensive guidance. ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "copilot_readFile"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Reading [](file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts": {
                "$mid": 1,
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                "scheme": "file"
              }
            }
          },
          "pastTenseMessage": {
            "value": "Read [](file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts": {
                "$mid": 1,
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                "scheme": "file"
              }
            }
          },
          "isConfirmed": {
            "type": 1
          },
          "isComplete": true,
          "source": {
            "type": "internal",
            "label": "Built-In"
          },
          "toolCallId": "9025a660-9e5e-44a6-8afe-d76990f1c756",
          "toolId": "copilot_readFile"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Reading [](file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json": {
                "$mid": 1,
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json",
                "scheme": "file"
              }
            }
          },
          "pastTenseMessage": {
            "value": "Read [](file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json)",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json": {
                "$mid": 1,
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json",
                "scheme": "file"
              }
            }
          },
          "isConfirmed": {
            "type": 1
          },
          "isComplete": true,
          "source": {
            "type": "internal",
            "label": "Built-In"
          },
          "toolCallId": "d70bd675-178a-4844-95ec-a9a6f28afd9c",
          "toolId": "copilot_readFile"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Searching codebase for \"authentication authorization auth setup configuration\"",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {}
          },
          "pastTenseMessage": {
            "value": "Searched codebase for \"authentication authorization auth setup configuration\", 23 results",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {}
          },
          "isConfirmed": {
            "type": 1
          },
          "isComplete": true,
          "source": {
            "type": "internal",
            "label": "Built-In"
          },
          "resultDetails": [
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\libs\\utilities\\architecture\\overview.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/libs/utilities/architecture/overview.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/libs/utilities/architecture/overview.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 223,
                "startColumn": 1,
                "endLineNumber": 250,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\monorepo\\architecture\\overview.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/monorepo/architecture/overview.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/monorepo/architecture/overview.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 223,
                "startColumn": 1,
                "endLineNumber": 250,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\architecture\\overview.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/architecture/overview.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/architecture/overview.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 223,
                "startColumn": 1,
                "endLineNumber": 250,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 7,
                "startColumn": 1,
                "endLineNumber": 15,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\instructions.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/instructions.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/instructions.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 5,
                "startColumn": 1,
                "endLineNumber": 33,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-email-api\\instructions.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-email-api/instructions.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-email-api/instructions.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 66,
                "startColumn": 1,
                "endLineNumber": 94,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 33,
                "startColumn": 1,
                "endLineNumber": 59,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 61,
                "startColumn": 1,
                "endLineNumber": 79,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 87,
                "startColumn": 1,
                "endLineNumber": 97,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 3,
                "startColumn": 1,
                "endLineNumber": 129,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\tools\\nginx\\architecture\\overview.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/tools/nginx/architecture/overview.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/tools/nginx/architecture/overview.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 217,
                "startColumn": 1,
                "endLineNumber": 244,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice-e2e\\src\\support\\test-setup.ts",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice-e2e/src/support/test-setup.ts",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice-e2e/src/support/test-setup.ts",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 10,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 34,
                "startColumn": 1,
                "endLineNumber": 55,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 62,
                "startColumn": 1,
                "endLineNumber": 92,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\IMPLEMENTATION_VALIDATION.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/IMPLEMENTATION_VALIDATION.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/IMPLEMENTATION_VALIDATION.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 37,
                "startColumn": 1,
                "endLineNumber": 63,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.spec.ts",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.spec.ts",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.spec.ts",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 35,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.ts",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 31,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 7,
                "startColumn": 1,
                "endLineNumber": 42,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 28,
                "startColumn": 1,
                "endLineNumber": 62,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 238,
                "startColumn": 1,
                "endLineNumber": 275,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\scripts\\tls\\generate-dev-certs.sh",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/scripts/tls/generate-dev-certs.sh",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/scripts/tls/generate-dev-certs.sh",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 89,
                "startColumn": 1,
                "endLineNumber": 118,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 39,
                "startColumn": 1,
                "endLineNumber": 67,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 788,
                "startColumn": 1,
                "endLineNumber": 800,
                "endColumn": 1
              }
            }
          ],
          "toolCallId": "db0f9342-e912-41c2-9fca-a41a39882a86",
          "toolId": "copilot_searchCodebase"
        },
        {
          "value": "Now let me get more information about Better Auth specifically: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_resolve-library-id"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Running `resolve-library-id`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Ran `resolve-library-id` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": "context7 (MCP Server)",
          "isConfirmed": {
            "type": 4
          },
          "isComplete": true,
          "source": {
            "type": "mcp",
            "serverLabel": "Context7",
            "instructions": "Use this server to retrieve up-to-date documentation and code examples for any library.",
            "label": "context7",
            "collectionId": "upstash.context7-mcp/context7",
            "definitionId": "upstash.context7-mcp/context7"
          },
          "resultDetails": {
            "input": "{\n  \"libraryName\": \"better-auth\"\n}",
            "output": [
              {
                "type": "embed",
                "isText": true,
                "value": "Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: Better Auth\n- Context7-compatible library ID: /websites/www_better-auth_com-docs-introduction\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript. It offers comprehensive features and a plugin ecosystem for advanced functionalities like 2FA, multi-tenancy, and SSO.\n- Code Snippets: 1\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /better-auth/better-auth\n- Description: Better Auth is a framework-agnostic authentication and authorization library for TypeScript, offering a comprehensive feature set and a plugin ecosystem for advanced functionalities.\n- Code Snippets: 1326\n- Trust Score: 7.6\n- Versions: v1.2.9, better-auth@1.3.4, v1_3_8, v1_3_10_beta_6, _better_auth_stripe_1_3_4\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /websites/better-auth\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript, offering a comprehensive feature set and a plugin ecosystem for advanced functionalities like 2FA and SSO.\n- Code Snippets: 476\n- Trust Score: 7.5\n----------\n- Title: Better Auth Microsoft Graph\n- Context7-compatible library ID: /zpg6/better-auth-microsoft-graph\n- Description: Seamlessly integrate better-auth with Microsoft Graph API to access user profile, calendar, contacts, mail, OneDrive, and more!\n- Code Snippets: 15\n- Trust Score: 7.5\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /llmstxt/better-auth_llms_txt\n- Description: Better Auth is a flexible authentication library that supports email/password, social providers, and can be extended with plugins like username, magic link, and passkey.\n- Code Snippets: 3312\n- Trust Score: 8\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /llmstxt/better-auth-ui_llms_txt\n- Description: Better Auth UI provides ready-to-use shadcn/ui styled components for rapidly implementing authentication features in Next.js and React applications, seamlessly integrating with better-auth.\n- Code Snippets: 1136\n- Trust Score: 8\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /daveyplate/better-auth-ui\n- Description: Plug and play shadcn/ui authentication components for better-auth, offering customizable sign-in, sign-up, password reset, user buttons, and email templates.\n- Code Snippets: 169\n- Trust Score: 6\n----------\n- Title: Better Auth (llmstxt)\n- Context7-compatible library ID: /www.better-auth.com/llmstxt\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript, providing out-of-the-box features and a plugin ecosystem for advanced auth functionalities.\n- Code Snippets: 8819\n- Trust Score: 7\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /websites/better-auth-ui\n- Description: Better Auth UI provides ready-to-use shadcn/ui styled components for rapidly implementing customizable authentication features in Next.js and React applications, seamlessly integrating with `better-auth`.\n- Code Snippets: 188\n- Trust Score: 7.5\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /get-convex/better-auth\n- Description: Convex Better Auth is a component that integrates Better Auth with Convex for enhanced authentication in applications.\n- Code Snippets: 130\n- Trust Score: 9.9\n----------\n- Title: Better Auth (llmstxt)\n- Context7-compatible library ID: /llmstxt/better-auth_com-llms.txt\n- Description: Better Auth is a flexible authentication solution providing built-in support for email/password and social logins, with easy extensibility through plugins.\n- Code Snippets: 11027\n- Trust Score: 8\n----------\n- Title: Better Auth Harmony\n- Context7-compatible library ID: /gekorm/better-auth-harmony\n- Description: A better-auth plugin for email and phone normalization and additional validation, blocking over 55,000 temporary email domains.\n- Code Snippets: 19\n- Trust Score: 8.4\n----------\n- Title: Better Auth Cloudflare\n- Context7-compatible library ID: /zpg6/better-auth-cloudflare\n- Description: Seamlessly integrate better-auth with Cloudflare Workers, D1, KV, and geolocation services. Available as NPM package and project template.\n- Code Snippets: 67\n- Trust Score: 7.5\n----------\n- Title: Better-Auth PocketBase\n- Context7-compatible library ID: /000alen/better-auth-pocketbase\n- Description: A PocketBase adapter for better-auth, offering automatic schema migrations and type-safe authentication with a plugin system.\n- Code Snippets: 3\n- Trust Score: 8.2\n----------\n- Title: Better Auth Swift\n- Context7-compatible library ID: /ouwargui/betterauthswift\n- Description: Better Auth Swift is a community-driven client library that simplifies the integration of the Better Auth authentication service into Swift applications, offering easy-to-use bindings and plugin support.\n- Code Snippets: 48\n- Trust Score: 7.5\n----------\n- Title: Better-Auth Kit\n- Context7-compatible library ID: /ping-maxwell/better-auth-kit\n- Description: A collection of plugins, tools, libraries, examples, and more for Better-Auth. 🚀\n- Code Snippets: 145\n- Trust Score: 7.4\n----------\n- Title: Better Auth Tauri\n- Context7-compatible library ID: /daveyplate/better-auth-tauri\n- Description: A Tauri plugin for Better Auth that simplifies authentication integration in desktop applications by handling deep links and managing authentication state.\n- Code Snippets: 6\n- Trust Score: 6\n----------\n- Title: Surreal Better Auth\n- Context7-compatible library ID: /oskar-gmerek/surreal-better-auth\n- Description: SurrealDB Adapter for Better Auth. Use your favorite database as a Better-Auth storage.\n- Code Snippets: 2\n- Trust Score: 7.7\n----------\n- Title: Nuxthub Better Auth\n- Context7-compatible library ID: /atinux/nuxthub-better-auth\n- Description: A demo showcasing BetterAuth integration with NuxtHub, featuring server-side rendering on Cloudflare Workers, edge database, and easy authentication with the useAuth() composable.\n- Code Snippets: 4\n- Trust Score: 10\n----------\n- Title: RivetKit Better Auth\n- Context7-compatible library ID: /joshua1/rivetkit-svelte\n- Description: An adapter for integrating Better Auth with RivetKit actors, providing seamless authentication and LINQ-style querying capabilities for data operations.\n- Code Snippets: 14\n- Trust Score: 6.2\n----------\n- Title: Better Auth Username\n- Context7-compatible library ID: /websites/raw_githubusercontent_better-auth_better-auth_refs_heads_main_content\n- Description: The Username plugin for Better Auth adds username support to the email and password authenticator, allowing users to sign in and sign up with a username instead of an email.\n- Code Snippets: 15\n- Trust Score: 7.5\n----------\n- Title: Better Auth TanStack\n- Context7-compatible library ID: /daveyplate/better-auth-tanstack\n- Description: Tanstack Query hooks for Better Auth, offering enhanced control over request timing, optimistic mutations, and offline caching for authentication.\n- Code Snippets: 21\n- Trust Score: 6\n----------\n- Title: Convex Better Auth\n- Context7-compatible library ID: /erquhart/convex-better-auth\n- Description: \n- Code Snippets: 15\n- Trust Score: 8.9\n----------\n- Title: RivetKit Better Auth\n- Context7-compatible library ID: /joshua1/rivetkit-better-auth\n- Description: A RivetKit adapter for Better Auth that provides seamless authentication integration with RivetKit actors using in-memory state management.\n- Code Snippets: 27\n- Trust Score: 6.2\n----------\n- Title: SurrealDB Better Auth\n- Context7-compatible library ID: /necmttn/surrealdb-better-auth\n- Description: A SurrealDB adapter for Better Auth, providing a robust authentication solution with SurrealDB's flexible database capabilities, featuring secure authentication, real-time data synchronization, and easy configuration.\n- Code Snippets: 10\n- Trust Score: 9.2\n----------\n- Title: NestJS Better Auth\n- Context7-compatible library ID: /thallesp/nestjs-better-auth\n- Description: Easily add authentication to your project\n- Code Snippets: 14\n- Trust Score: 8.7\n----------\n- Title: Convex + Better Auth\n- Context7-compatible library ID: /websites/convex-better-auth_netlify_app\n- Description: A Convex Component providing a typesafe, secure, and comprehensive integration layer for using Better Auth with Convex applications.\n- Code Snippets: 69\n- Trust Score: 7.5\n----------\n- Title: Überauth\n- Context7-compatible library ID: /websites/hexdocs_pm_ueberauth\n- Description: Überauth is an Elixir authentication system and a two-phase framework for Plug-based web applications, heavily inspired by Omniauth, providing a clear API for various authentication strategies.\n- Code Snippets: 45\n- Trust Score: 7.5\n----------\n- Title: GoAuth\n- Context7-compatible library ID: /websites/goauth_gitbook_io_goauth-documentation\n- Description: GoAuth is a private authorization service that simplifies adding social login (Google, Yandex, VK ID, Telegram) to applications, providing a unified user data response and handling OAuth complexities.\n- Code Snippets: 6\n- Trust Score: 7.5\n----------\n- Title: Better Streaming Assets\n- Context7-compatible library ID: /gwiazdorrr/betterstreamingassets\n- Description: A Unity plugin providing uniform, thread-safe, and efficient access to Streaming Assets, primarily benefiting Android projects by offering an alternative to inefficient WWW or Asset Bundles.\n- Code Snippets: 6\n- Trust Score: 7.7"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "libraryName": "better-auth"
            }
          },
          "toolCallId": "fac574ec-e468-4308-9bdd-c324db3465b1",
          "toolId": "mcp_context7_resolve-library-id"
        },
        {
          "value": "Perfect! Now let me get the Better Auth documentation: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_get-library-docs"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Running `get-library-docs`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Ran `get-library-docs` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": "context7 (MCP Server)",
          "isConfirmed": {
            "type": 4
          },
          "isComplete": true,
          "source": {
            "type": "mcp",
            "serverLabel": "Context7",
            "instructions": "Use this server to retrieve up-to-date documentation and code examples for any library.",
            "label": "context7",
            "collectionId": "upstash.context7-mcp/context7",
            "definitionId": "upstash.context7-mcp/context7"
          },
          "resultDetails": {
            "input": "{\n  \"context7CompatibleLibraryID\": \"/better-auth/better-auth\",\n  \"topic\": \"NestJS integration authentication setup configuration\",\n  \"tokens\": 15000\n}",
            "output": [
              {
                "type": "embed",
                "isText": true,
                "value": "================\nCODE SNIPPETS\n================\n### Import Better Auth Module in NestJS Root Module\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nIntegrate Better Auth into your NestJS application by importing the `AuthModule` into your root module, typically `AppModule`. Use `AuthModule.forRoot()` to initialize it with your Better Auth instance, making authentication services available throughout your application.\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { AuthModule } from '@thallesp/nestjs-better-auth';\nimport { auth } from \"./auth\"; // Your Better Auth instance\n\n@Module({\n  imports: [\n    AuthModule.forRoot({ auth }),\n  ],\n})\nexport class AppModule {}\n```\n\n--------------------------------\n\n### Disable NestJS Body Parser for Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nConfigure the NestJS application to disable its built-in body parser. This is a critical step that allows Better Auth to correctly process the raw request body, ensuring proper functionality and avoiding conflicts.\n\n```ts\nimport { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    bodyParser: false, // Required for Better Auth\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n--------------------------------\n\n### Install and Configure Bearer Plugin for better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet demonstrates how to integrate the Bearer plugin into your `better-auth` authentication setup. It imports `betterAuth` and the `bearer` plugin, then configures the `auth` instance to use the plugin, enabling Bearer token support.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [bearer()]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth with Admin Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/admin.mdx\n\nThis snippet demonstrates how to integrate the Admin plugin into your `better-auth` configuration. It involves importing the `admin` plugin and adding it to the `plugins` array of the `betterAuth` initialization. This setup enables administrative functionalities within your authentication system.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { admin } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        admin()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Social Providers (GitHub) in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/clerk-migration-guide.mdx\n\nThis TypeScript configuration snippet adds social authentication providers to Better Auth, specifically demonstrating GitHub integration. It requires `clientId` and `clientSecret` environment variables for secure setup.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { \n        enabled: true,\n    },\n    socialProviders: { // [!code highlight]\n        github: { // [!code highlight]\n            clientId: process.env.GITHUB_CLIENT_ID, // [!code highlight]\n            clientSecret: process.env.GITHUB_CLIENT_SECRET, // [!code highlight]\n        } // [!code highlight]\n    } // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Configure Zoom Authentication Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/zoom.mdx\n\nThis snippet demonstrates how to integrate Zoom as a social authentication provider within the better-auth library. It requires importing `betterAuth` and passing Zoom's `clientId` and `clientSecret` from environment variables to the `socialProviders` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n  socialProviders: {\n    zoom: { // [!code highlight]\n      clientId: process.env.ZOOM_CLIENT_ID as string, // [!code highlight]\n      clientSecret: process.env.ZOOM_CLIENT_SECRET as string, // [!code highlight]\n    }, // [!code highlight]\n  },\n})\n```\n\n--------------------------------\n\n### Protect NestJS Routes and Access Session with Better Auth Decorators\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nDemonstrates how to use `@Session`, `@AllowAnonymous`, and `@OptionalAuth` decorators within NestJS controllers to manage route protection and access user session information. This example covers protected routes, publicly accessible routes, and routes where authentication is optional, showcasing flexible access control.\n\n```ts\nimport { Controller, Get } from '@nestjs/common';\nimport { Session, UserSession, AllowAnonymous, OptionalAuth } from '@thallesp/nestjs-better-auth';\n\n@Controller('users')\nexport class UserController {\n  @Get('me')\n  async getProfile(@Session() session: UserSession) {\n    return { user: session.user };\n  }\n\n  @Get('public')\n  @AllowAnonymous() // Allow anonymous access\n  async getPublic() {\n    return { message: 'Public route' };\n  }\n\n  @Get('optional')\n  @OptionalAuth() // Authentication is optional\n  async getOptional(@Session() session: UserSession) {\n    return { authenticated: !!session };\n  }\n}\n```\n\n--------------------------------\n\n### Install NestJS Better Auth Library\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nInstall the `@thallesp/nestjs-better-auth` package using npm or yarn to integrate Better Auth functionalities into your NestJS project. This package provides the necessary modules and decorators.\n\n```shell\nnpm install @thallesp/nestjs-better-auth\n# or\nyarn add @thallesp/nestjs-better-auth\n```\n\n--------------------------------\n\n### Configure Cognito Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/cognito.mdx\n\nThis TypeScript code snippet illustrates how to integrate Amazon Cognito as a social provider into the `better-auth` instance. It requires configuration parameters such as `clientId`, `clientSecret`, `domain`, `region`, and `userPoolId`, which are typically sourced from environment variables for secure setup.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    cognito: {\n      clientId: process.env.COGNITO_CLIENT_ID as string,\n      clientSecret: process.env.COGNITO_CLIENT_SECRET as string,\n      domain: process.env.COGNITO_DOMAIN as string,\n      region: process.env.COGNITO_REGION as string,\n      userPoolId: process.env.COGNITO_USERPOOL_ID as string,\n    },\n  },\n})\n```\n\n--------------------------------\n\n### Register Custom Auth Middleware in Waku Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis configuration snippet shows how to integrate the custom authentication middleware (`./src/middleware/auth.ts`) into the Waku framework. By adding the middleware's path to the `middleware` array in `waku.config.ts`, it ensures that the session handling logic is executed for incoming requests.\n\n```ts\nimport { defineConfig } from \"waku/config\";\n\nexport default defineConfig({\n  middleware: [\n    \"waku/middleware/context\",\n    \"waku/middleware/dev-server\",\n    \"./src/middleware/auth.ts\",\n    \"waku/middleware/handler\",\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Authentication Methods (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis TypeScript snippet demonstrates how to enable built-in email/password authentication and configure social sign-on providers like GitHub for Better Auth. It shows how to pass configuration objects for 'emailAndPassword' and 'socialProviders' with client IDs and secrets.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  //...other options // [!code highlight]\n  emailAndPassword: { // [!code highlight]\n    enabled: true, // [!code highlight]\n  }, // [!code highlight]\n  socialProviders: { // [!code highlight]\n    github: { // [!code highlight]\n      clientId: process.env.GITHUB_CLIENT_ID as string, // [!code highlight]\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string, // [!code highlight]\n    }, // [!code highlight]\n  }, // [!code highlight]\n});\n```\n\n--------------------------------\n\n### Configure Dub Analytics Plugin in `better-auth` (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/dub.mdx\n\nThis TypeScript code snippet demonstrates how to configure the `dubAnalytics` plugin within your `better-auth` setup. It imports `betterAuth` and `dubAnalytics`, then initializes `dubAnalytics` with a `Dub` client instance, adding it to the `betterAuth` plugins array. This configuration enables Dub integration for your authentication system.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { dubAnalytics } from \"@dub/better-auth\"\nimport { dub } from \"dub\"\n\nexport const auth = betterAuth({\n    plugins: [\n        dubAnalytics({\n            dubClient: new Dub()\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure LINE Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/line.mdx\n\nThis code snippet demonstrates how to integrate LINE as a social authentication provider within the `better-auth` configuration. It requires setting `clientId` and `clientSecret` obtained from the LINE Developers Console, typically loaded from environment variables. Optional `redirectURI` and `scopes` can also be specified.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    line: {\n      clientId: process.env.LINE_CLIENT_ID as string,\n      clientSecret: process.env.LINE_CLIENT_SECRET as string,\n      // Optional: override redirect if needed\n      // redirectURI: \"https://your.app/api/auth/callback/line\",\n      // scopes are prefilled: [\"openid\",\"profile\",\"email\"]. Append if needed\n    }\n  }\n});\n```\n\n--------------------------------\n\n### Configure Atlassian Social Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/atlassian.mdx\n\nThis code snippet demonstrates how to integrate Atlassian as a social authentication provider within the `better-auth` instance. It requires importing `betterAuth` and passing Atlassian's `clientId` and `clientSecret` from environment variables to the `socialProviders` configuration. Ensure these environment variables are correctly set for production.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        atlassian: {\n            clientId: process.env.ATLASSIAN_CLIENT_ID as string,\n            clientSecret: process.env.ATLASSIAN_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure Social Login Providers in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet shows how to integrate social login providers like Google and GitHub into the Better Auth configuration. Each provider requires a `clientId`, `clientSecret`, and a `redirectUri` to enable external authentication functionality.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tsocialProviders: {\n\t\tgoogle: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/google\"\n\t\t},\n\t\tgithub: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/github\"\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Integrate Better Auth with SvelteKit Hooks\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nConfigures SvelteKit's `hooks.server.ts` to handle Better Auth. The `handle` function uses `svelteKitHandler` to process authentication requests, integrating with SvelteKit's request lifecycle.\n\n```typescript\nimport { auth } from \"$lib/auth\"; // path to your auth file\nimport { svelteKitHandler } from \"better-auth/svelte-kit\";\nimport { building } from '$app/environment'\n\nexport async function handle({ event, resolve }) {\n    return svelteKitHandler({ event, resolve, auth, building });\n}\n```\n\n--------------------------------\n\n### Configure Better Auth with OpenAPI Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/open-api.mdx\n\nThis TypeScript snippet demonstrates how to integrate the `openAPI` plugin into your `betterAuth` configuration. By adding `openAPI()` to the `plugins` array, you enable the Open API reference functionality for your Better Auth instance. This setup ensures that your authentication endpoints are documented and discoverable.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { openAPI } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ \n        openAPI(), \n    ] \n})\n```\n\n--------------------------------\n\n### Configure Notion Social Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/notion.mdx\n\nThis snippet demonstrates how to configure Notion as a social provider within the `better-auth` framework. It requires passing `clientId` and `clientSecret`, typically loaded from environment variables, to the `socialProviders.notion` object in your authentication configuration. This setup allows your application to use Notion for user authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        notion: {\n            clientId: process.env.NOTION_CLIENT_ID as string,\n            clientSecret: process.env.NOTION_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure Better Auth Handler with Elysia Framework\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis Elysia.js snippet defines a `betterAuthView` middleware that validates request methods (`GET`, `POST`) and forwards them to the `auth.handler`. It then mounts this middleware to `/api/auth/*` and starts the Elysia server, providing authentication integration for Elysia applications.\n\n```typescript\nimport { Elysia, Context } from \"elysia\";\nimport { auth } from \"./auth\";\n\nconst betterAuthView = (context: Context) => {\n    const BETTER_AUTH_ACCEPT_METHODS = [\"POST\", \"GET\"]\n    // validate request method\n    if(BETTER_AUTH_ACCEPT_METHODS.includes(context.request.method)) {\n        return auth.handler(context.request);\n    } else {\n        context.error(405)\n    }\n}\n\nconst app = new Elysia().all(\"/api/auth/*\", betterAuthView).listen(3000);\n\nconsole.log(\n`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`\n);\n```\n\n--------------------------------\n\n### Configure GitHub Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/github.mdx\n\nThis snippet demonstrates how to integrate GitHub as a social authentication provider within the `better-auth` instance. It requires a `clientId` and `clientSecret`, typically loaded from environment variables, to be passed to the `socialProviders.github` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID as string,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure better-auth with JWT plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/jwt.mdx\n\nThis snippet demonstrates how to add the JWT plugin to your `better-auth` configuration file (`auth.ts`). It imports `betterAuth` and the `jwt` plugin, then includes the `jwt()` call within the `plugins` array of the `betterAuth` initialization. This enables JWT token functionality in your authentication setup.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { jwt } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        jwt(), // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Configure SIWE Client Plugin in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis snippet demonstrates how to initialize the SIWE client plugin within the `better-auth` client. It shows the basic structure for integrating SIWE functionality on the client-side, with an optional configuration block for future extensions.\n\n```typescript\nimport { createAuthClient } from \"better-auth/client\";\nimport { siweClient } from \"better-auth/client/plugins\";\n\nexport const authClient = createAuthClient({\n  plugins: [\n    siweClient({\n      // Optional client configuration can go here\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Hono Client to Send Credentials (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/hono.mdx\n\nThis TypeScript code demonstrates how to initialize the Hono client (`hc`) with the `credentials: \"include\"` option. This setting is crucial for ensuring that authentication cookies are sent along with cross-origin requests, which is necessary when the client and server are hosted on different domains or ports, enabling proper authentication with Better Auth protected endpoints.\n\n```typescript\nimport { hc } from \"hono/client\";\nimport type { AppType } from \"./server\"; // Your Hono app type\n\nconst client = hc<AppType>(\"http://localhost:8787/\", {\n  init: {\n    credentials: \"include\", // Required for sending cookies cross-origin\n  },\n});\n\n// Now your client requests will include credentials\nconst response = await client.someProtectedEndpoint.$get();\n```\n\n--------------------------------\n\n### Configure Server-side Better Auth with Plugins (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/concepts/plugins.mdx\n\nThis TypeScript snippet demonstrates how to initialize Better Auth on the server by including plugins within the `plugins` array of the configuration object. It imports `betterAuth` from `better-auth` and sets up the server-side authentication instance.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    plugins: [\n        // Add your plugins here\n    ]\n});\n```\n\n--------------------------------\n\n### Implement SIWE Authentication with better-auth in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis comprehensive example illustrates how to set up the SIWE server plugin for `better-auth`, including custom implementations for nonce generation, message verification using `viem`, and optional ENS lookup. It configures the plugin with domain, email domain, anonymous sign-in settings, and integrates with a database.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { siwe } from \"better-auth/plugins\";\nimport { generateRandomString } from \"better-auth/crypto\";\nimport { verifyMessage, createPublicClient, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nexport const auth = betterAuth({\n  database: {\n    // your database configuration\n  },\n  plugins: [\n    siwe({\n      domain: \"myapp.com\",\n      emailDomainName: \"myapp.com\",\n      anonymous: false,\n      getNonce: async () => {\n        // Generate a cryptographically secure random nonce\n        return generateRandomString(32);\n      },\n      verifyMessage: async ({ message, signature, address }) => {\n        try {\n          // Verify the signature using viem (recommended)\n          const isValid = await verifyMessage({\n            address: address as `0x${string}`,\n            message,\n            signature: signature as `0x${string}`,\n          });\n          return isValid;\n        } catch (error) {\n          console.error(\"SIWE verification failed:\", error);\n          return false;\n        }\n      },\n      ensLookup: async ({ walletAddress }) => {\n        try {\n          // Optional: lookup ENS name and avatar using viem\n          // You can use viem's ENS utilities here\n          const client = createPublicClient({\n            chain: mainnet,\n            transport: http(),\n          });\n\n          const ensName = await client.getEnsName({\n            address: walletAddress as `0x${string}`,\n          });\n\n          const ensAvatar = ensName\n            ? await client.getEnsAvatar({\n                name: ensName,\n              })\n            : null;\n\n          return {\n            name: ensName || walletAddress,\n            avatar: ensAvatar || \"\",\n          };\n        } catch {\n          return {\n            name: walletAddress,\n            avatar: \"\",\n          };\n        }\n      },\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth as Convex authentication provider\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/convex.mdx\n\nAdds a `convex/auth.config.ts` file to define Better Auth as an authentication provider for your Convex application. It uses the `CONVEX_SITE_URL` environment variable for the domain and `convex` as the application ID.\n\n```typescript\nexport default {\n    providers: [\n        {\n            domain: process.env.CONVEX_SITE_URL,\n            applicationID: \"convex\",\n        },\n    ],\n};\n```\n\n--------------------------------\n\n### Configure Better Auth instance with Prisma adapter\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nitro.mdx\n\nCreate a Better Auth instance in `server/utils/auth.ts`, integrating it with Prisma using the `prismaAdapter`. This configuration enables email and password authentication and sets up the database connection.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, { provider: \"sqlite\" }),\n  emailAndPassword: { enabled: true },\n});\n```\n\n--------------------------------\n\n### Configure Slack Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/slack.mdx\n\nThis snippet demonstrates how to configure the Slack social provider within the better-auth library. It requires `clientId` and `clientSecret` obtained from a Slack app, typically loaded from environment variables, to enable Slack authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        slack: { \n            clientId: process.env.SLACK_CLIENT_ID as string, \n            clientSecret: process.env.SLACK_CLIENT_SECRET as string, \n        }, \n    },\n})\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins for Deep Linking (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nUpdates the Better Auth server configuration to include the app's custom URL scheme ('myapp://') in the 'trustedOrigins' list. This step is critical for enabling secure deep linking and redirects after authentication flows.\n\n```typescript\nexport const auth = betterAuth({\n    trustedOrigins: [\"myapp://\"]\n})\n```\n\n--------------------------------\n\n### Integrate Plugins with Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet illustrates how to add plugins to the Better Auth configuration. It specifically demonstrates the integration of the `emailOTP` plugin, which requires a custom function to handle sending one-time passwords for user verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { emailOTP } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n\tplugins: [\n\t\temailOTP({\n\t\t\tsendVerificationOTP: async ({ email, otp, type }) => {\n\t\t\t\t// Send OTP to user's email\n\t\t\t}\n\t\t})\n\t],\n})\n```\n\n--------------------------------\n\n### Configure a Default SAML SSO Provider (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/sso.mdx\n\nThis code snippet demonstrates how to configure a default SAML SSO provider using the `sso` plugin for `betterAuth`. The `defaultSSO` configuration allows for testing SAML authentication without requiring database setup and serves as a fallback when no matching provider is found, supporting all standard SAML configuration options.\n\n```ts\nconst auth = betterAuth({\n    plugins: [\n        sso({\n            defaultSSO: {\n                providerId: \"default-saml\", // Provider ID for the default provider\n                samlConfig: {\n                    issuer: \"https://your-app.com\",\n                    entryPoint: \"https://idp.example.com/sso\",\n                    cert: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\",\n                    callbackUrl: \"http://localhost:3000/api/auth/sso/saml2/sp/acs\",\n                    spMetadata: {\n                        entityID: \"http://localhost:3000/api/auth/sso/saml2/sp/metadata\",\n                        metadata: \"<!-- Your SP Metadata XML -->\",\n                    }\n                }\n            }\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in SolidStart\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nIntegrates Better Auth into SolidStart by exporting `GET` and `POST` methods for the `/routes/api/auth/*all.ts` route. It uses `toSolidStartHandler` to wrap the auth instance for request handling.\n\n```typescript\nimport { auth } from \"~/lib/auth\"; // path to your auth file\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n--------------------------------\n\n### Configure Spotify Provider with better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/spotify.mdx\n\nTo configure Spotify as a social provider, import `betterAuth` and pass Spotify client credentials to the `socialProviders` option. This setup uses environment variables for `clientId` and `clientSecret`.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n   \n    socialProviders: {\n        spotify: {\n            clientId: process.env.SPOTIFY_CLIENT_ID as string,\n            clientSecret: process.env.SPOTIFY_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Add Expo Plugin to Better Auth Server Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis TypeScript snippet demonstrates how to configure the Better Auth server to use the Expo plugin. It imports 'betterAuth' and 'expo' from their respective packages and registers the 'expo()' plugin within the 'plugins' array of the 'betterAuth' instance, also enabling email and password authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\n\nexport const auth = betterAuth({\n    plugins: [expo()],\n    emailAndPassword: { \n        enabled: true, \n      }, \n});\n```\n\n--------------------------------\n\n### Configure Better Auth for Email and Password Authentication (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis snippet demonstrates how to enable email and password authentication in your Better Auth configuration by setting the `emailAndPassword.enabled` property to `true`.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    emailAndPassword: {\n        enabled: true\n    }\n})\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in Nuxt\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nuxt.mdx\n\nThis TypeScript snippet defines an API route handler in Nuxt for Better Auth. It imports the authentication configuration and processes incoming web requests through the `auth.handler`.\n\n```ts\nimport { auth } from \"~/lib/auth\"; // import your auth config\n\nexport default defineEventHandler((event) => {\n\treturn auth.handler(toWebRequest(event));\n});\n```\n\n--------------------------------\n\n### Configure Custom Cookie Name/Prefix for getSessionCookie (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis snippet illustrates how to pass custom options, such as `cookieName` and `cookiePrefix`, to the `getSessionCookie` function. This is necessary when the authentication configuration in `auth.ts` uses non-default cookie settings, ensuring that the middleware correctly identifies the session cookie.\n\n```ts\nconst sessionCookie = getSessionCookie(request, {\n    cookieName: \"my_session_cookie\",\n    cookiePrefix: \"my_prefix\"\n})\n```\n\n--------------------------------\n\n### Configure Better Auth OIDC Provider for JWKS Endpoint with JWT Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/oidc-provider.mdx\n\nThis TypeScript configuration demonstrates integrating the `oidcProvider` plugin with the `jwt` plugin in Better Auth to enable asymmetric key signing for ID tokens and expose a JWKS endpoint. It also disables the default `/token` endpoint for OIDC compliance, directing OAuth traffic to `/oauth2/token`. This setup requires the `better-auth` and `better-auth/plugins` packages.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { oidcProvider } from \"better-auth/plugins\";\nimport { jwt } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    disabledPaths: [\n        \"/token\",\n    ],\n    plugins: [\n        jwt(), // Make sure to add the JWT plugin\n        oidcProvider({\n            useJWTPlugin: true, // Enable JWT plugin integration\n            loginPage: \"/sign-in\",\n            // ... other options\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Better Auth with TanStack Start Cookie Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/tanstack.mdx\n\nThis snippet demonstrates how to configure Better Auth (`betterAuth`) by adding the `reactStartCookies` plugin. This plugin automatically handles cookie setting for TanStack Start, ensuring authentication functions like `signInEmail` or `signUpEmail` correctly manage cookies within the TanStack Start environment. It's crucial to place this plugin last in the `plugins` array.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { reactStartCookies } from \"better-auth/react-start\";\n\nexport const auth = betterAuth({\n    //...your config\n    plugins: [reactStartCookies()] // make sure this is the last plugin in the array\n})\n```\n\n--------------------------------\n\n### Initializes Better Auth backend instance for Remix (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/remix.mdx\n\nThis snippet sets up the Better Auth server-side instance in `auth.server.ts` within a Remix project. It configures the database provider and URL using environment variables. The instance must be exported as `auth` or as a default export for proper integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    database: {\n        provider: \"postgres\", //change this to your database provider\n        url: process.env.DATABASE_URL, // path to your database or connection string\n    }\n})\n```\n\n--------------------------------\n\n### Configure Two-Factor Authentication Plugin in Better Auth Server\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis TypeScript snippet demonstrates how to integrate the two-factor authentication plugin into your Better Auth server instance. By importing `twoFactor` from `better-auth/plugins` and including it in the `plugins` array during the `betterAuth` initialization, you enable 2FA-related routes and methods on your server.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { twoFactor } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    //...rest of the options\n    plugins: [ // [!code highlight]\n        twoFactor() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth Client for Lynx (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/lynx.mdx\n\nImports `createAuthClient` from `better-auth/lynx` to set up the authentication client. The `baseURL` property specifies the endpoint of your Better Auth server, enabling communication for authentication operations.\n\n```typescript\nimport { createAuthClient } from \"better-auth/lynx\"\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server\n})\n```\n\n--------------------------------\n\n### Configure Basic Salesforce Provider with Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/salesforce.mdx\n\nThis snippet demonstrates how to configure the Salesforce social provider within Better Auth, setting the client ID, client secret, and environment. It uses environment variables for sensitive credentials and highlights the minimal required configuration for integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        salesforce: { // [!code highlight]\n            clientId: process.env.SALESFORCE_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.SALESFORCE_CLIENT_SECRET as string, // [!code highlight]\n            environment: \"production\", // or \"sandbox\" // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n--------------------------------\n\n### Integrate Autumn Plugin with Better Auth Configuration\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/autumn.mdx\n\nAdds the Autumn plugin to your Better Auth configuration, enabling it to manage user or organization-scoped billing. This setup routes authentication events and customer data through Autumn, supporting various identification strategies for billing.\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [autumn()],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [organization(), autumn({ customerScope: \"organization\" })],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [\n    organization(),\n    autumn({ customerScope: \"user_and_organization\" })\n  ],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [\n    organization(),\n    autumn({\n          identify: async ({ session, organization }) => {\n            return {\n              customerId: \"your_customer_id\",\n              customerData: {\n                name: \"Customer Name\",\n                email: \"customer@gmail.com\",\n              },\n            };\n          },\n        }),\n      ],\n    });\n```\n\n--------------------------------\n\n### Configure Hugging Face Social Provider (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/huggingface.mdx\n\nThis code snippet demonstrates how to configure Hugging Face as a social authentication provider within the `better-auth` library. It involves importing `betterAuth` and setting the `clientId` and `clientSecret` using environment variables. These credentials are required for the OAuth flow and should be obtained from your Hugging Face OAuth application settings.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        huggingface: {\n            clientId: process.env.HUGGINGFACE_CLIENT_ID as string,\n            clientSecret: process.env.HUGGINGFACE_CLIENT_SECRET as string,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure better-auth Server with Phone Number Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/phone-number.mdx\n\nIntegrates the better-auth phone number plugin into the server-side authentication setup. It requires implementing the `sendOTP` function to handle sending one-time passwords for verification via SMS or other methods.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { phoneNumber } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [ \n        phoneNumber({\n            sendOTP: ({ phoneNumber, code }, request) => {\n                // Implement sending OTP code via SMS\n            }\n        })\n    ] \n})\n```\n\n--------------------------------\n\n### Configure Main Better Auth Instance with PostgreSQL Pool\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/blogs/0-supabase-auth-to-planetscale-migration.mdx\n\nThis TypeScript snippet demonstrates the primary configuration for `betterAuth`, integrating it with a PostgreSQL database using `pg.Pool`. It defines the base URL for authentication endpoints and enables email and password-based sign-in methods, utilizing `DATABASE_URL` from environment variables for connection.\n\n```ts\nimport { Pool } from \"pg\";\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  baseURL: \"http://localhost:3000\",\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n});\n```\n\n--------------------------------\n\n### Configure Anonymous Plugin in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/anonymous.mdx\n\nThis code snippet demonstrates how to add the `anonymous` plugin to your `betterAuth` configuration in TypeScript. It imports the plugin and includes it in the `plugins` array to enable anonymous authentication on the server-side.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { anonymous } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        anonymous() // [!code highlight]\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in Next.js\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nIntegrates Better Auth into a Next.js API route. It uses `toNextJsHandler` to create `POST` and `GET` exports for the `api/auth/[...all]` route, handling all authentication requests.\n\n```typescript\nimport { auth } from \"@/lib/auth\"; // path to your auth file\nimport { toNextJsHandler } from \"better-auth/next-js\";\n\nexport const { POST, GET } = toNextJsHandler(auth);\n```\n\n--------------------------------\n\n### Configure Email and Password Authentication in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet demonstrates how to enable and configure email and password authentication within the Better Auth library. It includes settings for sign-up, email verification, password policies (minimum/maximum length), automatic sign-in, and custom functions for sending reset password emails and handling password hashing/verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\temailAndPassword: {\n\t\tenabled: true,\n\t\tdisableSignUp: false,\n\t\trequireEmailVerification: true,\n\t\tminPasswordLength: 8,\n\t\tmaxPasswordLength: 128,\n\t\tautoSignIn: true,\n\t\tsendResetPassword: async ({ user, url, token }) => {\n\t\t\t// Send reset password email\n\t\t},\n\t\tresetPasswordTokenExpiresIn: 3600, // 1 hour\n\t\tpassword: {\n\t\t\thash: async (password) => {\n\t\t\t\t// Custom password hashing\n\t\t\t\treturn hashedPassword;\n\t\t\t},\n\t\t\tverify: async ({ hash, password }) => {\n\t\t\t\t// Custom password verification\n\t\t\t\treturn isValid;\n\t\t\t}\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Configure Better Auth SIWE Server Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis code configures the server-side Sign In with Ethereum (SIWE) plugin for Better Auth. It imports `betterAuth` and the `siwe` plugin, setting up `domain`, optional `emailDomainName`, `anonymous` flag, and custom logic for `getNonce`, `verifyMessage`, and optional `ensLookup`.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { siwe } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        siwe({\n            domain: \"example.com\",\n            emailDomainName: \"example.com\", // optional\n            anonymous: false, // optional, default is true\n            getNonce: async () => {\n                // Implement your nonce generation logic here\n                return \"your-secure-random-nonce\";\n            },\n            verifyMessage: async (args) => {\n                // Implement your SIWE message verification logic here\n                // This should verify the signature against the message\n                return true; // return true if signature is valid\n            },\n            ensLookup: async (args) => {\n                // Optional: Implement ENS lookup for user names and avatars\n                return {\n                    name: \"user.eth\",\n                    avatar: \"https://example.com/avatar.png\"\n                };\n            }\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure BetterAuth server with username plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/username.mdx\n\nThis TypeScript snippet demonstrates how to integrate the `username` plugin into the BetterAuth server configuration. It imports `betterAuth` and `username` from their respective packages and adds the `username()` plugin to the `plugins` array during `betterAuth` initialization. This enables username-based authentication on the server-side.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        username()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Auth Client to Use Stored Bearer Token\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet shows how to configure the `createAuthClient` to automatically include the Bearer token in all outgoing requests. It uses a dynamic function to retrieve the token from `localStorage`, ensuring the latest token is always used for authentication.\n\n```ts\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        auth: {\n           type:\"Bearer\",\n           token: () => localStorage.getItem(\"bearer_token\") || \"\" // get the token from localStorage\n        }\n    }\n});\n```\n\n--------------------------------\n\n### Enable Email and Password Authentication in Better Auth Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/clerk-migration-guide.mdx\n\nThis TypeScript snippet modifies the Better Auth configuration to enable email and password authentication. It includes a placeholder for `sendVerificationEmail`, which needs custom implementation for email verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { // [!code highlight]\n        enabled: true, // [!code highlight]\n    }, // [!code highlight]\n    emailVerification: {\n      sendVerificationEmail: async({ user, url })=>{\n        // implement your logic here to send email verification\n      }\n\t},\n})\n```\n\n--------------------------------\n\n### Integrate Social Providers (Google, GitHub) with Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/auth0-migration-guide.mdx\n\nAdds social login capabilities to Better Auth by integrating providers like Google and GitHub. This configuration requires specifying `clientId` and `clientSecret` for each provider, typically sourced from environment variables. This enables users to authenticate using their existing social accounts.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({\n        connectionString: process.env.DATABASE_URL\n    }),\n    emailAndPassword: {\n        enabled: true,\n    },\n    socialProviders: {\n        google: {\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        },\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure Slack Provider for Specific Workspace\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/slack.mdx\n\nThis snippet demonstrates how to restrict Slack sign-in to a particular workspace by providing the `team` parameter in the `socialProviders.slack` configuration. The `team` value should be the Slack workspace ID to enforce workspace-specific authentication.\n\n```typescript\nsocialProviders: {\n    slack: {\n        clientId: process.env.SLACK_CLIENT_ID as string,\n        clientSecret: process.env.SLACK_CLIENT_SECRET as string,\n        team: \"T1234567890\", // Your Slack workspace ID\n    },\n}\n```\n\n--------------------------------\n\n### Configure Have I Been Pwned Plugin in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/have-i-been-pwned.mdx\n\nThis snippet demonstrates how to import and register the `haveIBeenPwned` plugin with `betterAuth` in a TypeScript configuration file. It shows the basic setup required to enable the password compromise checking functionality within your authentication system.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { haveIBeenPwned } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    plugins: [\n        haveIBeenPwned()\n    ]\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth Client with Expo Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nInitializes the Better Auth client in an Expo application, configuring it with a base URL and the 'expoClient' plugin. The plugin enables social authentication flows and secure cookie management by integrating with 'expo-secure-store' for session persistence.\n\n```typescript\nimport { createAuthClient } from \"better-auth/react\";\nimport { expoClient } from \"@better-auth/expo/client\";\nimport * as SecureStore from \"expo-secure-store\";\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\", \n    plugins: [\n        expoClient({\n            scheme: \"myapp\",\n            storagePrefix: \"myapp\",\n            storage: SecureStore,\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure JWT plugin for OAuth Provider Mode (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/jwt.mdx\n\nThis configuration snippet shows how to adjust the `betterAuth` setup for OAuth provider mode. It disables the `/token` endpoint and prevents the `set-auth-jwt` header from being set by configuring the `jwt` plugin with `disableSettingJwtHeader: true`. This ensures compliance with OAuth standards when using OIDC or MCP plugins.\n\n```typescript\nbetterAuth({\n  disabledPaths: [\n    \"/token\",\n  ],\n  plugins: [jwt({\n    disableSettingJwtHeader: true,\n  })]\n})\n```\n\n--------------------------------\n\n### Integrate Better Auth API Routes with Astro\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis Astro API route configuration handles `GET` and `POST` requests by passing them to the `auth.handler` function, which is imported from a local authentication module. It sets up the necessary endpoints for Better Auth within an Astro project.\n\n```typescript\nimport type { APIRoute } from \"astro\";\nimport { auth } from \"@/auth\"; // path to your auth file\n\nexport const GET: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n\nexport const POST: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n```\n\n--------------------------------\n\n### Configure Password Reset and Post-Reset Logic in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/email-password.mdx\n\nThis TypeScript snippet configures the `betterAuth` instance with `sendResetPassword` and `onPasswordReset` functions for email and password authentication. The `sendResetPassword` function handles sending the password reset email, utilizing a custom `sendEmail` utility, while `onPasswordReset` defines logic to execute after a password has been successfully reset. This setup is crucial for enabling and managing the password reset flow.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { sendEmail } from \"./email\"; // your email sending function\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    sendResetPassword: async ({user, url, token}, request) => {\n      await sendEmail({\n        to: user.email,\n        subject: \"Reset your password\",\n        text: `Click the link to reset your password: ${url}`,\n      });\n    },\n    onPasswordReset: async ({ user }, request) => {\n      // your logic here\n      console.log(`Password for user ${user.email} has been reset.`);\n    },\n  },\n});\n```\n\n--------------------------------\n\n### Configure Server-side Better-Auth with Passkey Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/passkey.mdx\n\nThis TypeScript snippet demonstrates how to integrate the passkey plugin into your server-side `betterAuth` configuration. It covers importing the plugin and passing it to the `plugins` array, with options for `rpID`, `rpName`, `origin`, and `authenticatorSelection` for WebAuthn customization.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { passkey } from \"better-auth/plugins/passkey\"\n\nexport const auth = betterAuth({\n    plugins: [\n        passkey(),\n    ],\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth instance with Convex client\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/convex.mdx\n\nCreates and initializes the Better Auth component in `convex/auth.ts`, integrating it with Convex. It sets up the base URL, configures the database adapter, enables email/password authentication (without verification), and includes the essential Convex plugin for compatibility.\n\n```typescript\nimport { createClient, type GenericCtx } from \"@convex-dev/better-auth\";\nimport { convex } from \"@convex-dev/better-auth/plugins\";\nimport { components } from \"./_generated/api\";\nimport { DataModel } from \"./_generated/dataModel\";\nimport { query } from \"./_generated/server\";\nimport { betterAuth } from \"better-auth\";\n\nconst siteUrl = process.env.SITE_URL!;\n\n// The component client has methods needed for integrating Convex with Better Auth,\n// as well as helper methods for general use.\nexport const authComponent = createClient<DataModel>(components.betterAuth);\n\nexport const createAuth = (\n    ctx: GenericCtx<DataModel>,\n        { optionsOnly } = { optionsOnly: false },\n    ) => {\n              return betterAuth({\n                // disable logging when createAuth is called just to generate options.\n                // this is not required, but there's a lot of noise in logs without it.\n                logger: {\n                    disabled: optionsOnly,\n                },\n                baseURL: siteUrl,\n                database: authComponent.adapter(ctx),\n                // Configure simple, non-verified email/password to get started\n                emailAndPassword: {\n                    enabled: true,\n                    requireEmailVerification: false,\n                },\n                plugins: [\n                    // The Convex plugin is required for Convex compatibility\n                    convex(),\n                ],\n            });\n        };\n```\n\n--------------------------------\n\n### Configure Client-Side BetterAuth with Two-Factor Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/2fa.mdx\n\nThis TypeScript snippet illustrates how to integrate the \"twoFactorClient\" plugin into your BetterAuth client configuration. This ensures the client-side application is equipped to handle 2FA flows, including redirection for verification.\n\n```typescript\nimport { createAuthClient } from \"better-auth/client\"\nimport { twoFactorClient } from \"better-auth/client/plugins\"\n\nexport const authClient = createAuthClient({\n    plugins: [\n        twoFactorClient()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure BetterAuth Server with Polar Sub-Plugins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/polar.mdx\n\nInitialize the BetterAuth server instance by integrating the Polar plugin, which includes sub-plugins for checkout, customer portal, usage tracking, and secure webhook handling. This configuration connects your authentication service to Polar's payment and billing functionalities.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { polar, checkout, portal, usage, webhooks } from \"@polar-sh/better-auth\";\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polarClient = new Polar({\n    accessToken: process.env.POLAR_ACCESS_TOKEN,\n    // Use 'sandbox' if you're using the Polar Sandbox environment\n    // Remember that access tokens, products, etc. are completely separated between environments.\n    // Access tokens obtained in Production are for instance not usable in the Sandbox environment.\n    server: 'sandbox'\n});\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            client: polarClient,\n            createCustomerOnSignUp: true,\n            use: [\n                checkout({\n                    products: [\n                        {\n                            productId: \"123-456-789\", // ID of Product from Polar Dashboard\n                            slug: \"pro\" // Custom slug for easy reference in Checkout URL, e.g. /checkout/pro\n                        }\n                    ],\n                    successUrl: \"/success?checkout_id={CHECKOUT_ID}\",\n                    authenticatedUsersOnly: true\n                }),\n                portal(),\n                usage(),\n                webhooks({\n                    secret: process.env.POLAR_WEBHOOK_SECRET,\n                    onCustomerStateChanged: (payload) => // Triggered when anything regarding a customer changes\n                    onOrderPaid: (payload) => // Triggered when an order was paid (purchase, subscription renewal, etc.)\n                    ...  // Over 25 granular webhook handlers\n                    onPayload: (payload) => // Catch-all for all events\n                })\n            ],\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Better-Auth with Polar Checkout Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/polar.mdx\n\nThis snippet demonstrates how to integrate the Polar Checkout plugin into your Better-Auth configuration. It allows for defining products with slugs, setting a success URL for checkout completion, and controlling whether only authenticated users can initiate checkouts.\n\n```typescript\nimport { polar, checkout } from \"@polar-sh/better-auth\";\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            ...\n            use: [\n                checkout({\n                    // Optional field - will make it possible to pass a slug to checkout instead of Product ID\n                    products: [ { productId: \"123-456-789\", slug: \"pro\" } ],\n                    // Relative URL to return to when checkout is successfully completed\n                    successUrl: \"/success?checkout_id={CHECKOUT_ID}\",\n                    // Wheather you want to allow unauthenticated checkout sessions or not\n                    authenticatedUsersOnly: true\n                })\n            ]\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Social Providers in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis code demonstrates how to enable and configure social authentication providers like GitHub within Better Auth. It requires setting `clientId` and `clientSecret` for each desired provider in the `socialProviders` object.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID!,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### TRPC Integration for Authenticated Requests with Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis snippet illustrates how to configure a TRPC client to automatically include the session cookie in all its requests. It achieves this by setting up an `httpBatchLink` that retrieves the cookie from `authClient.getCookie()` and injects it into the request headers.\n\n```tsx\n//...other imports\nimport { authClient } from \"@/lib/auth-client\";\n\nexport const api = createTRPCReact<AppRouter>();\n\nexport function TRPCProvider(props: { children: React.ReactNode }) {\n  const [queryClient] = useState(() => new QueryClient());\n  const [trpcClient] = useState(() =>\n    api.createClient({\n      links: [\n        httpBatchLink({\n          //...your other options\n          headers() {\n            const headers = new Map<string, string>();\n            const cookies = authClient.getCookie();\n            if (cookies) {\n              headers.set(\"Cookie\", cookies);\n            }\n            return Object.fromEntries(headers);\n          },\n        }),\n      ],\n    }),\n  );\n\n  return (\n    <api.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        {props.children}\n      </QueryClientProvider>\n    </api.Provider>\n  );\n}\n```\n\n--------------------------------\n\n### Initialize Better Auth Client for Web Frameworks (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis code demonstrates creating an authentication client instance using `createAuthClient` from the `better-auth` library. It shows implementations for Vanilla JS, React, Vue, Svelte, and Solid, all configured with an optional `baseURL`. The client facilitates interaction with the auth server.\n\n```ts\nimport { createAuthClient } from \"better-auth/client\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/react\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/vue\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/svelte\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/solid\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n--------------------------------\n\n### Apple Client Configuration Parameters for better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/apple.mdx\n\nThis configuration snippet illustrates key parameters for setting up Apple authentication within the `better-auth` library. It includes environment variable usage for `clientSecret` and `appBundleIdentifier`, and specifies `trustedOrigins` to support Apple's authentication flows.\n\n```typescript\nclientSecret: process.env.APPLE_CLIENT_SECRET as string,\n                    // Optional\n                    appBundleIdentifier: process.env.APPLE_APP_BUNDLE_IDENTIFIER as string,\n                },\n            // Add appleid.apple.com to trustedOrigins for Sign In with Apple flows\n            trustedOrigins: [\"https://appleid.apple.com\"],\n```\n\n--------------------------------\n\n### Configure BetterAuth Advanced Settings (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nProvides advanced configuration options for `betterAuth`, covering IP address tracking, secure cookies, CSRF checks, cross-subdomain cookie sharing, custom cookie attributes, and database settings like ID generation and default limits. It allows fine-tuning security and data handling.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tadvanced: {\n\t\tipAddress: {\n\t\t\tipAddressHeaders: [\"x-client-ip\", \"x-forwarded-for\"],\n\t\t\tdisableIpTracking: false\n\t\t},\n\t\tuseSecureCookies: true,\n\t\tdisableCSRFCheck: false,\n\t\tcrossSubDomainCookies: {\n\t\t\tenabled: true,\n\t\t\tadditionalCookies: [\"custom_cookie\"],\n\t\t\tdomain: \"example.com\"\n\t\t},\n\t\tcookies: {\n\t\t\tsession_token: {\n\t\t\t\tname: \"custom_session_token\",\n\t\t\t\tattributes: {\n\t\t\t\t\thttpOnly: true,\n\t\t\t\t\tsecure: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdefaultCookieAttributes: {\n\t\t\thttpOnly: true,\n\t\t\tsecure: true\n\t\t},\n\t\tcookiePrefix: \"myapp\",\n\t\tdatabase: {\n\t\t\t// If your DB is using auto-incrementing IDs, set this to true.\n\t\t\tuseNumberId: false,\n\t\t\t// Use your own custom ID generator, or disable generating IDs as a whole.\n\t\t\tgenerateId: (((options: {\n\t\t\t\tmodel: LiteralUnion<Models, string>;\n\t\t\t\tsize?: number;\n\t\t\t}) => {\n\t\t\t\treturn \"my-super-unique-id\";\n\t\t\t})) | false,\n\t\t\tdefaultFindManyLimit: 100\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Configure Better Auth with SSO Plugin (OIDC/SAML)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/blogs/1-3.mdx\n\nThis TypeScript code demonstrates how to integrate the SSO plugin with 'better-auth', enabling both OIDC and SAML 2.0 authentication. It configures client IDs, secrets, SAML entry points, certificates, and dynamically limits providers based on user plans.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { sso } from \"@better-auth/sso\";\n\nexport const auth = betterAuth({\n  plugins: [\n    sso({\n      oidc: {\n        clientId: process.env.OIDC_CLIENT_ID!,\n        clientSecret: process.env.OIDC_CLIENT_SECRET!,\n      },\n      saml: {\n        entryPoint: \"https://example.com/saml\",\n        issuer: \"better-auth-example\",\n        certificate: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\",\n      },\n      providersLimit: async (user) => {\n        const plan = await getUserPlan(user);\n        return plan.name === \"pro\" ? 10 : 1;\n      },\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth for Email and Password (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/email-password.mdx\n\nEnable email and password authentication by setting the `emailAndPassword.enabled` option to `true` in the Better Auth configuration. This is a foundational step to allow users to sign up and sign in using their email and password.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  emailAndPassword: { // [!code highlight]\n    enabled: true, // [!code highlight]\n  }, // [!code highlight]\n});\n```\n\n--------------------------------\n\n### Integrate Generic OAuth Plugin into Better Auth Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/other-social-providers.mdx\n\nThis snippet demonstrates how to add the `genericOAuth` plugin to your Better Auth server-side configuration. It shows how to define custom OAuth providers by specifying their `providerId`, `clientId`, `clientSecret`, and a `discoveryUrl` or other OAuth endpoints within the plugin's configuration array.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { genericOAuth } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        genericOAuth({\n            config: [\n                {\n                    providerId: \"provider-id\",\n                    clientId: \"test-client-id\",\n                    clientSecret: \"test-client-secret\",\n                    discoveryUrl: \"https://auth.example.com/.well-known/openid-configuration\",\n                    // ... other config options\n                }\n                // Add more providers as needed\n            ]\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Kakao Social Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/kakao.mdx\n\nThis TypeScript snippet demonstrates how to configure Kakao as a social authentication provider within the `better-auth` instance. It requires a client ID and client secret, typically loaded from environment variables (e.g., KAKAO_CLIENT_ID, KAKAO_CLIENT_SECRET), to be passed to the `kakao` provider object in the `socialProviders` configuration.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        kakao: {\n            clientId: process.env.KAKAO_CLIENT_ID as string,\n            clientSecret: process.env.KAKAO_CLIENT_SECRET as string,\n        },\n    }\n})\n```\n\n--------------------------------\n\n### Configure CORS for Better Auth with Express\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/express.mdx\n\nThis example shows how to configure Cross-Origin Resource Sharing (CORS) for an Express server integrating Better Auth using the `cors` middleware. It demonstrates setting allowed origins, HTTP methods, and enabling credentials.\n\n```typescript\nimport express from \"express\";\nimport cors from \"cors\"; // Import the CORS middleware\nimport { toNodeHandler, fromNodeHeaders } from \"better-auth/node\";\nimport { auth } from \"./auth\";\n\nconst app = express();\nconst port = 3005;\n\n// Configure CORS middleware\napp.use(\n  cors({\n    origin: \"http://your-frontend-domain.com\", // Replace with your frontend's origin\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], // Specify allowed HTTP methods\n    credentials: true, // Allow credentials (cookies, authorization headers, etc.)\n  })\n);\n```\n\n--------------------------------\n\n### Configure BetterAuth Account Settings (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nSets up the `account` options within `betterAuth` for managing user accounts. This includes specifying the model name, mapping user fields, enabling OAuth token encryption, and configuring account linking with trusted providers and email policies.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\taccount: {\n\t\tmodelName: \"accounts\",\n\t\tfields: {\n\t\t\tuserId: \"user_id\"\n\t\t},\n\t\tencryptOAuthTokens: true, // Encrypt OAuth tokens before storing them in the database\n\t\taccountLinking: {\n\t\t\tenabled: true,\n\t\t\ttrustedProviders: [\"google\", \"github\", \"email-password\"],\n\t\t\tallowDifferentEmails: false\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Mount Better Auth Handler in SolidStart API Route (*auth.ts)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/solid-start.mdx\n\nThis TypeScript code snippet demonstrates how to mount the Better Auth handler within a SolidStart API route. It imports the 'auth' instance and the 'toSolidStartHandler' utility, then exports the GET and POST methods required for handling authentication requests.\n\n```ts\nimport { auth } from \"~/lib/auth\";\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n--------------------------------\n\n### Configure Global Bearer Token Storage in Auth Client\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet demonstrates configuring a global `onSuccess` callback within the `createAuthClient`'s `fetchOptions`. It automatically extracts the `set-auth-token` from response headers and stores it in `localStorage` for any successful request, ensuring the token is always up-to-date.\n\n```ts\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        onSuccess: (ctx) => {\n            const authToken = ctx.response.headers.get(\"set-auth-token\") // get the token from the response headers\n            // Store the token securely (e.g., in localStorage)\n            if(authToken){\n              localStorage.setItem(\"bearer_token\", authToken);\n            }\n        }\n    }\n});\n```\n\n--------------------------------\n\n### Configure Better Auth instance for Waku applications\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis code block demonstrates how to initialize the `betterAuth` instance in a Waku application. It sets up the database provider and connection URL, typically sourced from environment variables. Ensure the instance is exported as `auth` or a default export for proper integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    database: {\n        provider: \"postgres\", //change this to your database provider\n        url: process.env.DATABASE_URL, // path to your database or connection string\n    }\n})\n```\n\n--------------------------------\n\n### Configure Global Cookie Attributes for Cross-Domain in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/hono.mdx\n\nThis TypeScript configuration demonstrates how to globally set cookie attributes for Better Auth using `defaultCookieAttributes` within the `createAuth` function. It configures `SameSite=None`, `Secure=true`, and `Partitioned=true` to enable cross-site cookies, which is necessary for certain cross-domain use cases.\n\n```ts\nexport const auth = createAuth({\n  advanced: {\n    defaultCookieAttributes: {\n      sameSite: \"none\",\n      secure: true,\n      partitioned: true // New browser standards will mandate this for foreign cookies\n    }\n  }\n})\n```\n\n--------------------------------\n\n### Create Better Auth Svelte Client Instance\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/svelte-kit.mdx\n\nThis snippet demonstrates how to create an authentication client instance for Svelte applications using `createAuthClient` imported from `better-auth/svelte`. This client can be configured with client-specific settings and is essential for performing client-side authentication operations such as sign-up, sign-in, and managing session state reactively.\n\n```typescript\nimport { createAuthClient } from \"better-auth/svelte\"; // make sure to import from better-auth/svelte\n\nexport const authClient = createAuthClient({\n  // you can pass client configuration here\n});\n```\n\n--------------------------------\n\n### Implement Next.js Middleware for Authentication with auth.api\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/next.mdx\n\nThis TypeScript code demonstrates how to create a Next.js middleware to protect routes by checking user authentication status using `auth.api.getSession`. It imports necessary modules from 'next/server' and 'next/headers', and relies on a custom authentication library at '@/lib/auth'. If a session is not found, the user is redirected to the sign-in page; otherwise, the request proceeds. The middleware is configured to run specifically on the '/dashboard' route using the Node.js runtime, which is required for `auth.api` usage.\n\n```typescript\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { headers } from \"next/headers\";\nimport { auth } from \"@/lib/auth\";\n\nexport async function middleware(request: NextRequest) {\n    const session = await auth.api.getSession({\n        headers: await headers()\n    })\n\n    if(!session) {\n        return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n    }\n\n    return NextResponse.next();\n}\n\nexport const config = {\n  runtime: \"nodejs\",\n  matcher: [\"/dashboard\"] // Apply middleware to specific routes\n};\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/fastify.mdx\n\nDefines an array of trusted origins for the Better Auth instance. This configuration is crucial for security, ensuring that authentication requests are only processed from specified client domains, preventing unauthorized cross-origin access.\n\n```ts\nexport const auth = betterAuth({\n  trustedOrigins: [\"http://localhost:3000\", \"https://example.com\"]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Backend with Expo Server Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/packages/expo/README.md\n\nThis TypeScript code demonstrates how to configure your Better Auth backend to include the Expo server plugin. It sets the base URL, adds the `expo()` plugin to handle Expo-specific authentication flows, and configures email/password authentication along with trusted origins for your Expo app's scheme.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\"; // Import the server plugin\n\nexport const auth = betterAuth({\n    // ...your other Better Auth options\n    baseURL: \"http://localhost:8081\", // The base URL of your application server where the routes are mounted.\n    plugins: [expo()], // Add the Expo server plugin\n    emailAndPassword: {\n        enabled: true,\n    },\n    // Add other configurations like trustedOrigins\n    trustedOrigins: [\"myapp://\"] // Replace \"myapp\" with your app's scheme\n});\n```\n\n--------------------------------\n\n### Configure MCP Plugin in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/mcp.mdx\n\nThis TypeScript code demonstrates how to integrate the MCP plugin into your Better Auth configuration. It imports `betterAuth` and the `mcp` plugin, then initializes `betterAuth` with the `mcp` plugin, specifying the path to your login page. This setup enables your application to act as an OAuth provider for MCP clients.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { mcp } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        mcp({\n            loginPage: \"/sign-in\" // path to your login page\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure GitHub Social Provider in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/supabase-migration-guide.mdx\n\nThis TypeScript configuration demonstrates how to add social login providers, specifically GitHub, to your Better Auth setup. It requires `clientId` and `clientSecret` from environment variables, which must be configured for your GitHub OAuth application.\n\n```ts\nimport { admin, anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    database: new Pool({\n        connectionString: process.env.DATABASE_URL\n    }),\n    emailAndPassword: {\n        enabled: true,\n    },\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure VK ID Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/vk.mdx\n\nThis snippet demonstrates how to configure VK ID as a social authentication provider within the `better-auth` framework. It requires importing `betterAuth` and passing VK ID credentials (client ID and client secret, typically sourced from environment variables) to the `socialProviders` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    vk: {\n      clientId: process.env.VK_CLIENT_ID as string,\n      clientSecret: process.env.VK_CLIENT_SECRET as string,\n    },\n  },\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis snippet demonstrates how to configure `trustedOrigins` for the `betterAuth` instance. Trusted origins define the allowed URL schemes for deep linking, supporting basic schemes, environment-specific schemes (production/staging), and wildcard patterns for all paths within a given scheme.\n\n```javascript\nexport const auth = betterAuth({\n    trustedOrigins: [\n        // Basic scheme\n        \"myapp://\", \n        \n        // Production & staging schemes\n        \"myapp-prod://\",\n        \"myapp-staging://\",\n        \n        // Wildcard support for all paths following the scheme\n        \"myapp://*\"\n    ]\n})\n```"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "context7CompatibleLibraryID": "/better-auth/better-auth",
              "topic": "NestJS integration authentication setup configuration",
              "tokens": 15000
            }
          },
          "toolCallId": "97a905d6-ac64-4d81-89db-0bf023c20e24",
          "toolId": "mcp_context7_get-library-docs"
        },
        {
          "value": "Based on my research of your current setup and Better Auth capabilities, here's a comprehensive guide for building a centralized authentication system with NestJS and Better Auth:\n\n## Key Considerations for Building a Centralized Auth System with NestJS & Better Auth\n\n### 1. **Architecture & Design Decisions**\n\n#### **Centralized vs. Distributed**\n- **Centralized Service**: Create a dedicated NestJS microservice (similar to your `my-nest-js-email-microservice`) specifically for authentication\n- **Service-to-Service (S2S) Communication**: Your other services will communicate with this auth service via JWT tokens or API keys\n- **Session Management**: Decide between stateless (JWT) vs. stateful (session store) approaches\n\n#### **Multi-Tenancy Considerations**\n- Better Auth supports **organization plugin** for multi-tenant scenarios\n- Consider whether you need user-level, organization-level, or both scopes for authentication\n- Plan your database schema to support tenant isolation\n\n### 2. **Database Architecture**\n\n```typescript\n// Better Auth requires specific database tables\n// You'll need:\n- users table (email, password hash, verification status)\n- sessions table (session tokens, expiry)\n- accounts table (OAuth provider data)\n- verification_tokens table (email verification, password reset)\n```\n\n**Important**: Better Auth has built-in schema migration tools, but you should:\n- Review the generated schema to ensure it aligns with your data model\n- Consider adding custom fields for your specific use case\n- Plan for data retention and GDPR compliance\n\n### 3. **Integration Strategy with NestJS**\n\nBased on the Better Auth documentation, you have two main approaches:\n\n#### **Option A: Using `@thallesp/nestjs-better-auth` (Recommended)**\n\n```typescript\n// Install\nnpm install @thallesp/nestjs-better-auth\n\n// In your auth.ts (server config)\nimport { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    },\n  },\n});\n\n// In your app.module.ts\nimport { AuthModule } from '@thallesp/nestjs-better-auth';\nimport { auth } from \"./auth\";\n\n@Module({\n  imports: [\n    AuthModule.forRoot({ auth }),\n  ],\n})\nexport class AppModule {}\n\n// In main.ts - CRITICAL!\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    bodyParser: false, // Required for Better Auth\n  });\n  await app.listen(3000);\n}\n```\n\n#### **Route Protection with Decorators**\n\n```typescript\nimport { Controller, Get } from '@nestjs/common';\nimport { Session, UserSession, AllowAnonymous, OptionalAuth } from '@thallesp/nestjs-better-auth';\n\n@Controller('users')\nexport class UserController {\n  @Get('me')\n  async getProfile(@Session() session: UserSession) {\n    return { user: session.user };\n  }\n\n  @Get('public')\n  @AllowAnonymous() // Allow anonymous access\n  async getPublic() {\n    return { message: 'Public route' };\n  }\n\n  @Get('optional')\n  @OptionalAuth() // Authentication is optional\n  async getOptional(@Session() session: UserSession) {\n    return { authenticated: !!session };\n  }\n}\n```\n\n### 4. **Authentication Methods to Consider**\n\n```typescript\nexport const auth = betterAuth({\n  // 1. Email & Password (Basic)\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: true,\n    minPasswordLength: 8,\n    sendResetPassword: async ({ user, url, token }) => {\n      // Integrate with your email microservice here\n      await fetch('http://localhost:3000/api/email/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          to: user.email,\n          subject: 'Reset Password',\n          body: `Click here: ${url}`,\n        }),\n      });\n    },\n  },\n  \n  // 2. Social Providers (OAuth)\n  socialProviders: {\n    google: { clientId: '...', clientSecret: '...' },\n    github: { clientId: '...', clientSecret: '...' },\n  },\n  \n  // 3. Advanced Features via Plugins\n  plugins: [\n    twoFactor(), // 2FA/TOTP\n    bearer(), // Bearer token auth for APIs\n    passkey(), // WebAuthn/Passkeys\n    jwt(), // JWT tokens\n    admin(), // Admin role management\n    organization(), // Multi-tenancy\n  ],\n});\n```\n\n### 5. **Security Considerations**\n\n#### **Critical Security Features**\n```typescript\nexport const auth = betterAuth({\n  // CSRF Protection\n  advanced: {\n    disableCSRFCheck: false, // Keep enabled\n    useSecureCookies: true, // HTTPS only\n    ipAddress: {\n      disableIpTracking: false, // Track for security\n      ipAddressHeaders: [\"x-forwarded-for\", \"x-real-ip\"],\n    },\n  },\n  \n  // Cross-Origin Configuration\n  trustedOrigins: [\n    \"https://yourdomain.com\",\n    \"https://app.yourdomain.com\",\n  ],\n  \n  // Session Security\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // 1 day\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5, // 5 minutes\n    },\n  },\n});\n```\n\n#### **Password Security**\n- Better Auth uses **Scrypt** by default (good!)\n- Consider enabling the **Have I Been Pwned** plugin:\n\n```typescript\nimport { haveIBeenPwned } from \"better-auth/plugins\";\n\nplugins: [\n  haveIBeenPwned(), // Prevents compromised passwords\n]\n```\n\n### 6. **Service-to-Service Authentication**\n\nFor your microservices architecture:\n\n```typescript\nimport { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    bearer(), // Enables Bearer token auth\n  ],\n});\n```\n\n**Client Services** can authenticate using Bearer tokens:\n\n```typescript\n// In other microservices\nconst response = await fetch('http://auth-service/api/resource', {\n  headers: {\n    'Authorization': `Bearer ${token}`,\n  },\n});\n```\n\n### 7. **Integration with Your Email Microservice**\n\nSince you already have `my-nest-js-email-microservice`, integrate it for:\n\n```typescript\nexport const auth = betterAuth({\n  emailAndPassword: {\n    sendResetPassword: async ({ user, url }) => {\n      // Call your email microservice\n      await yourEmailService.send({\n        to: user.email,\n        template: 'password-reset',\n        data: { resetUrl: url },\n      });\n    },\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      await yourEmailService.send({\n        to: user.email,\n        template: 'email-verification',\n        data: { verifyUrl: url },\n      });\n    },\n  },\n});\n```\n\n### 8. **Frontend Client Setup**\n\nBetter Auth provides framework-specific clients:\n\n```typescript\n// For Next.js (your my-programs-app)\nimport { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n  baseURL: \"http://localhost:3000\", // Your auth service\n  plugins: [\n    // Add client-side plugins as needed\n  ],\n});\n\n// Usage\nconst { signIn, signUp, session } = authClient.useSession();\n```\n\n### 9. **Deployment & DevOps Considerations**\n\n- **Environment Variables**: You'll need many (DB URL, OAuth secrets, JWT secrets, etc.)\n- **Secrets Management**: Use proper secret management (AWS Secrets Manager, Azure Key Vault, etc.)\n- **Database Migrations**: Better Auth includes migration tools, but test thoroughly\n- **HTTPS**: Required for secure cookies and OAuth providers\n- **CORS**: Configure properly for cross-origin requests\n- **Rate Limiting**: Implement to prevent brute force attacks\n\n### 10. **Testing Strategy**\n\n```typescript\n// Unit Tests\n- Mock Better Auth service\n- Test route guards\n- Test session validation\n\n// Integration Tests\n- Test full auth flows (signup, login, logout)\n- Test password reset flow\n- Test OAuth flows (if using)\n- Test S2S authentication\n\n// E2E Tests (Playwright)\n- User signup flow\n- Login with email/password\n- Login with social providers\n- Password reset flow\n- Session persistence\n```\n\n### 11. **Recommended Architecture**\n\n```\n┌─────────────────────────────────────────┐\n│       Frontend (my-programs-app)        │\n│         Better Auth Client              │\n└───────────────┬─────────────────────────┘\n                │\n                │ HTTPS / Cookie-based\n                │\n┌───────────────▼─────────────────────────┐\n│    Auth Microservice (NestJS)           │\n│    - Better Auth Instance                │\n│    - User Management                     │\n│    - Session Management                  │\n│    - OAuth Providers                     │\n└───────┬─────────────────────┬───────────┘\n        │                     │\n        │ S2S (Bearer)        │ Email\n        │                     │\n┌───────▼──────────┐  ┌──────▼────────────┐\n│  Other Services  │  │ Email Microservice│\n│                  │  │                   │\n└──────────────────┘  └───────────────────┘\n```\n\n### 12. **Next Steps**\n\n1. **Create a new NestJS service** for auth: `npx nx g @nx/nest:app auth-service`\n2. **Install dependencies**: `npm install better-auth @thallesp/nestjs-better-auth`\n3. **Set up database** (PostgreSQL recommended)\n4. **Configure Better Auth** with your requirements\n5. **Integrate with email microservice** for verification emails\n6. **Add route protection** to your existing apps\n7. **Implement S2S auth** for microservice communication\n8. **Add comprehensive testing**\n9. **Document the API** (OpenAPI/Swagger)\n10. **Deploy with proper secrets management**\n\n### 13. **Potential Gotchas**\n\n⚠️ **CRITICAL**: Disable NestJS body parser (`bodyParser: false`) or Better Auth won't work\n⚠️ Better Auth uses its own cookie management - don't interfere with it\n⚠️ OAuth redirect URIs must be exact matches (including trailing slashes)\n⚠️ Database schema must match Better Auth expectations\n⚠️ Cross-domain cookies require `SameSite=None` and `Secure=true`\n\nWould you like me to help you create a specific implementation plan or generate the initial service structure for your auth microservice?",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_503edd04-88aa-4de1-b9cd-b498c5543726",
      "result": {
        "timings": {
          "firstProgress": 32107,
          "totalElapsed": 126687
        },
        "metadata": {
          "codeBlocks": [
            {
              "code": "// Better Auth requires specific database tables\n// You'll need:\n- users table (email, password hash, verification status)\n- sessions table (session tokens, expiry)\n- accounts table (OAuth provider data)\n- verification_tokens table (email verification, password reset)\n",
              "language": "typescript",
              "markdownBeforeBlock": "Based on my research of your current setup and Better Auth capabilities, here's a comprehensive guide for building a centralized authentication system with NestJS and Better Auth:\n\n## Key Considerations for Building a Centralized Auth System with NestJS & Better Auth\n\n### 1. **Architecture & Design Decisions**\n\n#### **Centralized vs. Distributed**\n- **Centralized Service**: Create a dedicated NestJS microservice (similar to your `my-nest-js-email-microservice`) specifically for authentication\n- **Service-to-Service (S2S) Communication**: Your other services will communicate with this auth service via JWT tokens or API keys\n- **Session Management**: Decide between stateless (JWT) vs. stateful (session store) approaches\n\n#### **Multi-Tenancy Considerations**\n- Better Auth supports **organization plugin** for multi-tenant scenarios\n- Consider whether you need user-level, organization-level, or both scopes for authentication\n- Plan your database schema to support tenant isolation\n\n### 2. **Database Architecture**\n\n"
            },
            {
              "code": "// Install\nnpm install @thallesp/nestjs-better-auth\n\n// In your auth.ts (server config)\nimport { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    },\n  },\n});\n\n// In your app.module.ts\nimport { AuthModule } from '@thallesp/nestjs-better-auth';\nimport { auth } from \"./auth\";\n\n@Module({\n  imports: [\n    AuthModule.forRoot({ auth }),\n  ],\n})\nexport class AppModule {}\n\n// In main.ts - CRITICAL!\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    bodyParser: false, // Required for Better Auth\n  });\n  await app.listen(3000);\n}\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n**Important**: Better Auth has built-in schema migration tools, but you should:\n- Review the generated schema to ensure it aligns with your data model\n- Consider adding custom fields for your specific use case\n- Plan for data retention and GDPR compliance\n\n### 3. **Integration Strategy with NestJS**\n\nBased on the Better Auth documentation, you have two main approaches:\n\n#### **Option A: Using `@thallesp/nestjs-better-auth` (Recommended)**\n\n"
            },
            {
              "code": "import { Controller, Get } from '@nestjs/common';\nimport { Session, UserSession, AllowAnonymous, OptionalAuth } from '@thallesp/nestjs-better-auth';\n\n@Controller('users')\nexport class UserController {\n  @Get('me')\n  async getProfile(@Session() session: UserSession) {\n    return { user: session.user };\n  }\n\n  @Get('public')\n  @AllowAnonymous() // Allow anonymous access\n  async getPublic() {\n    return { message: 'Public route' };\n  }\n\n  @Get('optional')\n  @OptionalAuth() // Authentication is optional\n  async getOptional(@Session() session: UserSession) {\n    return { authenticated: !!session };\n  }\n}\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n#### **Route Protection with Decorators**\n\n"
            },
            {
              "code": "export const auth = betterAuth({\n  // 1. Email & Password (Basic)\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: true,\n    minPasswordLength: 8,\n    sendResetPassword: async ({ user, url, token }) => {\n      // Integrate with your email microservice here\n      await fetch('http://localhost:3000/api/email/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          to: user.email,\n          subject: 'Reset Password',\n          body: `Click here: ${url}`,\n        }),\n      });\n    },\n  },\n  \n  // 2. Social Providers (OAuth)\n  socialProviders: {\n    google: { clientId: '...', clientSecret: '...' },\n    github: { clientId: '...', clientSecret: '...' },\n  },\n  \n  // 3. Advanced Features via Plugins\n  plugins: [\n    twoFactor(), // 2FA/TOTP\n    bearer(), // Bearer token auth for APIs\n    passkey(), // WebAuthn/Passkeys\n    jwt(), // JWT tokens\n    admin(), // Admin role management\n    organization(), // Multi-tenancy\n  ],\n});\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 4. **Authentication Methods to Consider**\n\n"
            },
            {
              "code": "export const auth = betterAuth({\n  // CSRF Protection\n  advanced: {\n    disableCSRFCheck: false, // Keep enabled\n    useSecureCookies: true, // HTTPS only\n    ipAddress: {\n      disableIpTracking: false, // Track for security\n      ipAddressHeaders: [\"x-forwarded-for\", \"x-real-ip\"],\n    },\n  },\n  \n  // Cross-Origin Configuration\n  trustedOrigins: [\n    \"https://yourdomain.com\",\n    \"https://app.yourdomain.com\",\n  ],\n  \n  // Session Security\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // 1 day\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5, // 5 minutes\n    },\n  },\n});\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 5. **Security Considerations**\n\n#### **Critical Security Features**\n"
            },
            {
              "code": "import { haveIBeenPwned } from \"better-auth/plugins\";\n\nplugins: [\n  haveIBeenPwned(), // Prevents compromised passwords\n]\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n#### **Password Security**\n- Better Auth uses **Scrypt** by default (good!)\n- Consider enabling the **Have I Been Pwned** plugin:\n\n"
            },
            {
              "code": "import { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    bearer(), // Enables Bearer token auth\n  ],\n});\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 6. **Service-to-Service Authentication**\n\nFor your microservices architecture:\n\n"
            },
            {
              "code": "// In other microservices\nconst response = await fetch('http://auth-service/api/resource', {\n  headers: {\n    'Authorization': `Bearer ${token}`,\n  },\n});\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n**Client Services** can authenticate using Bearer tokens:\n\n"
            },
            {
              "code": "export const auth = betterAuth({\n  emailAndPassword: {\n    sendResetPassword: async ({ user, url }) => {\n      // Call your email microservice\n      await yourEmailService.send({\n        to: user.email,\n        template: 'password-reset',\n        data: { resetUrl: url },\n      });\n    },\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      await yourEmailService.send({\n        to: user.email,\n        template: 'email-verification',\n        data: { verifyUrl: url },\n      });\n    },\n  },\n});\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 7. **Integration with Your Email Microservice**\n\nSince you already have `my-nest-js-email-microservice`, integrate it for:\n\n"
            },
            {
              "code": "// For Next.js (your my-programs-app)\nimport { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n  baseURL: \"http://localhost:3000\", // Your auth service\n  plugins: [\n    // Add client-side plugins as needed\n  ],\n});\n\n// Usage\nconst { signIn, signUp, session } = authClient.useSession();\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 8. **Frontend Client Setup**\n\nBetter Auth provides framework-specific clients:\n\n"
            },
            {
              "code": "// Unit Tests\n- Mock Better Auth service\n- Test route guards\n- Test session validation\n\n// Integration Tests\n- Test full auth flows (signup, login, logout)\n- Test password reset flow\n- Test OAuth flows (if using)\n- Test S2S authentication\n\n// E2E Tests (Playwright)\n- User signup flow\n- Login with email/password\n- Login with social providers\n- Password reset flow\n- Session persistence\n",
              "language": "typescript",
              "markdownBeforeBlock": "\n### 9. **Deployment & DevOps Considerations**\n\n- **Environment Variables**: You'll need many (DB URL, OAuth secrets, JWT secrets, etc.)\n- **Secrets Management**: Use proper secret management (AWS Secrets Manager, Azure Key Vault, etc.)\n- **Database Migrations**: Better Auth includes migration tools, but test thoroughly\n- **HTTPS**: Required for secure cookies and OAuth providers\n- **CORS**: Configure properly for cross-origin requests\n- **Rate Limiting**: Implement to prevent brute force attacks\n\n### 10. **Testing Strategy**\n\n"
            },
            {
              "code": "┌─────────────────────────────────────────┐\n│       Frontend (my-programs-app)        │\n│         Better Auth Client              │\n└───────────────┬─────────────────────────┘\n                │\n                │ HTTPS / Cookie-based\n                │\n┌───────────────▼─────────────────────────┐\n│    Auth Microservice (NestJS)           │\n│    - Better Auth Instance                │\n│    - User Management                     │\n│    - Session Management                  │\n│    - OAuth Providers                     │\n└───────┬─────────────────────┬───────────┘\n        │                     │\n        │ S2S (Bearer)        │ Email\n        │                     │\n┌───────▼──────────┐  ┌──────▼────────────┐\n│  Other Services  │  │ Email Microservice│\n│                  │  │                   │\n└──────────────────┘  └───────────────────┘\n",
              "language": "",
              "markdownBeforeBlock": "\n### 11. **Recommended Architecture**\n\n"
            }
          ],
          "renderedUserMessage": [
            {
              "type": 1,
              "text": "<context>\nThe current date is October 13, 2025.\nTerminals:\nTerminal: bash\nTerminal: nx run @my-projects-monorepo/source:local-registry\nTerminal: bash\nTerminal: nx run @my-projects-monorepo/my-nest-js-email-microservice:test\nTerminal: Jest (my-projects-monorepo)\nTerminal: PowerShell Extension\n\n</context>\n<editorContext>\nThe user's current file is c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts. \n</editorContext>\n<repoContext>\nBelow is the information about the current repository. You can use this information when you need to calculate diffs or compare changes with the default branch.\nRepository name: my-projects-monorepo\nOwner: EmperorRAG\nCurrent branch: master\nDefault branch: master\n\n</repoContext>\n<reminderInstructions>\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\n\n</reminderInstructions>\n<userRequest>\nWhat do I need to consider if I were to make a nest.js node server that implemented better-auth to provide the functionality for a centralized account management, authorization and verification system?\n</userRequest>\n"
            },
            {
              "type": 3,
              "cacheType": "ephemeral"
            }
          ],
          "renderedGlobalContext": [
            {
              "type": 1,
              "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"bash.exe\". When you generate terminal commands, please generate them correctly for this shell.\n</environment_info>\n<workspace_info>\nI am working in a workspace with the following folders:\n- c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo \nI am working in a workspace that has the following structure:\n```\nAGENTS.md\ndocker-compose.certbot-nginx.yaml\ndocker-compose.production-example.yaml\nDOCUMENTATION-STRUCTURE-COMPLETE.md\neslint.config.mjs\njest.config.ts\njest.preset.js\nllms.txt\nnx.json\npackage.json\npnpm-lock.yaml\npnpm-workspace.yaml\nREADME.md\ntsconfig.base.json\ntsconfig.json\ntypedoc.json\ntypedoc.md.json\napps/\n\tmy-programs-app/\n\t\tDockerfile\n\t\teslint.config.mjs\n\t\tindex.d.ts\n\t\tjest.config.ts\n\t\tnext-env.d.ts\n\t\tnext.config.js\n\t\tpackage.json\n\t\tpostcss.config.js\n\t\ttailwind.config.js\n\t\ttsconfig.json\n\t\ttsconfig.spec.json\n\t\tpublic/\n\t\tspecs/\n\t\tsrc/\n\tmy-programs-app-e2e/\n\t\teslint.config.mjs\n\t\tpackage.json\n\t\tplaywright.config.ts\n\t\ttsconfig.json\n\t\tsrc/\n\t\ttest-output/\ndocs/\n\tDOCUMENTATION-CHATMODE-IMPLEMENTATION.md\n\tdocumentation-structure-reference.md\n\tDOCUMENTATION-WORKFLOW.md\n\tREADME.md\n\tapps/\n\t\tREADME.md\n\tlibs/\n\t\tREADME.md\n\t\tutilities/\n\tmonorepo/\n\t\tarchitecture/\n\t\tcopilot-deep-dive/\n\t\tepics/\n\t\tguides/\n\t\tlearnings/\n\t\tmcp-tools/\n\tservices/\n\t\tREADME.md\n\t\tmy-nest-js-email-microservice/\n\ttools/\n\t\tREADME.md\n\t\tnginx/\nlibs/\n\tutilities/\n\t\teslint.config.mjs\n\t\tjest.config.ts\n\t\tpackage.json\n\t\tREADME.md\n\t\trollup.config.cjs\n\t\ttsconfig.json\n\t\ttsconfig.lib.json\n\t\ttsconfig.spec.json\n\t\tdocs/\n\t\tout-tsc/\n\t\tsrc/\nscripts/\n\tnx-setup-cache.sh\nservices/\n\tmy-nest-js-email-microservice/\n\t\tDockerfile\n\t\teslint.config.mjs\n\t\tIMPLEMENTATION_VALIDATION.md\n\t\tjest.config.ts\n\t\tpackage.json\n\t\tREADME.md\n\t\ttsconfig.app.json\n\t\ttsconfig.json\n\t\ttsconfig.spec.json\n\t\twebpack.config.js\n\t\tdocs/\n\t\tsrc/\n\t\ttest/\n\tmy-nest-js-email-microservice-e2e/\n\t\teslint.config.mjs\n\t\tjest.config.ts\n\t\tpackage.json\n\t\ttsconfig.json\n\t\tsrc/\ntmp/\n\tlocal-registry/\n\t\tstorage/\ntools/\n\tcertbot/\n\t\tdocker-compose.yaml\n\t\tIMPLEMENTATION_SUMMARY.md\n\t\tINTEGRATION.md\n\t\tNGINX-INTEGRATION.md\n\t\tproject.json\n\t\tQUICKSTART.md\n\t\tREADME-install-certbot.md\n\t\tREADME.md\n\t\tWORKFLOW.md\n\t\tdocker/\n\t\tscripts/\n\tnginx/\n\t\tdocker-compose.mvp.yaml\n\t\tdocker-compose.prod.yaml\n\t\tdocker-compose.tls.yaml\n\t\tdocker-compose.yaml\n\t\tHEALTH_CHECK_BEFORE_AFTER.md\n\t\t...\n\tscripts/\n\t\t...\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
            },
            {
              "type": 3,
              "cacheType": "ephemeral"
            }
          ],
          "cacheKey": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo",
          "toolCallRounds": [
            {
              "response": "I'll help you understand the key considerations for building a centralized authentication system using NestJS and Better Auth. Let me first gather some information about your current setup and then provide comprehensive guidance. ",
              "toolCalls": [
                {
                  "name": "read_file",
                  "arguments": "{\"filePath\": \"c:\\\\Users\\\\MJDesktop\\\\OneDrive\\\\Documents\\\\my-projects-monorepo\\\\services\\\\my-nest-js-email-microservice\\\\src\\\\main.ts\"}",
                  "id": "toolu_01Qww5m3cqM8fkjsV3fB5zRL__vscode-1760375232503"
                },
                {
                  "name": "read_file",
                  "arguments": "{\"filePath\": \"c:\\\\Users\\\\MJDesktop\\\\OneDrive\\\\Documents\\\\my-projects-monorepo\\\\services\\\\my-nest-js-email-microservice\\\\package.json\"}",
                  "id": "toolu_01Bc5oQTrjWTsLFCAJ7byXit__vscode-1760375232504"
                },
                {
                  "name": "semantic_search",
                  "arguments": "{\"query\": \"authentication authorization auth setup configuration\"}",
                  "id": "toolu_013cPWMK5rnANK9hramSQAjZ__vscode-1760375232505"
                }
              ],
              "toolInputRetry": 0,
              "id": "2e9c8855-381e-4ceb-9513-bee8250e97ee"
            },
            {
              "response": "Now let me get more information about Better Auth specifically: ",
              "toolCalls": [
                {
                  "name": "mcp_context7_resolve-library-id",
                  "arguments": "{\"libraryName\": \"better-auth\"}",
                  "id": "toolu_01U4Q9j9oy7z7Axo533VPu32__vscode-1760375232506"
                }
              ],
              "toolInputRetry": 0,
              "id": "ceaf211e-f7ab-4fee-bbae-4e6914d91304"
            },
            {
              "response": "Perfect! Now let me get the Better Auth documentation: ",
              "toolCalls": [
                {
                  "name": "mcp_context7_get-library-docs",
                  "arguments": "{\"context7CompatibleLibraryID\": \"/better-auth/better-auth\", \"topic\": \"NestJS integration authentication setup configuration\", \"tokens\": 15000}",
                  "id": "toolu_01RiPGp2JM9jm67osWWGq3YP__vscode-1760375232507"
                }
              ],
              "toolInputRetry": 0,
              "id": "655eee44-ba6b-4317-afeb-dae1f1a01687"
            },
            {
              "response": "Based on my research of your current setup and Better Auth capabilities, here's a comprehensive guide for building a centralized authentication system with NestJS and Better Auth:\n\n## Key Considerations for Building a Centralized Auth System with NestJS & Better Auth\n\n### 1. **Architecture & Design Decisions**\n\n#### **Centralized vs. Distributed**\n- **Centralized Service**: Create a dedicated NestJS microservice (similar to your `my-nest-js-email-microservice`) specifically for authentication\n- **Service-to-Service (S2S) Communication**: Your other services will communicate with this auth service via JWT tokens or API keys\n- **Session Management**: Decide between stateless (JWT) vs. stateful (session store) approaches\n\n#### **Multi-Tenancy Considerations**\n- Better Auth supports **organization plugin** for multi-tenant scenarios\n- Consider whether you need user-level, organization-level, or both scopes for authentication\n- Plan your database schema to support tenant isolation\n\n### 2. **Database Architecture**\n\n```typescript\n// Better Auth requires specific database tables\n// You'll need:\n- users table (email, password hash, verification status)\n- sessions table (session tokens, expiry)\n- accounts table (OAuth provider data)\n- verification_tokens table (email verification, password reset)\n```\n\n**Important**: Better Auth has built-in schema migration tools, but you should:\n- Review the generated schema to ensure it aligns with your data model\n- Consider adding custom fields for your specific use case\n- Plan for data retention and GDPR compliance\n\n### 3. **Integration Strategy with NestJS**\n\nBased on the Better Auth documentation, you have two main approaches:\n\n#### **Option A: Using `@thallesp/nestjs-better-auth` (Recommended)**\n\n```typescript\n// Install\nnpm install @thallesp/nestjs-better-auth\n\n// In your auth.ts (server config)\nimport { betterAuth } from \"better-auth\";\nimport { Pool } from \"pg\";\n\nexport const auth = betterAuth({\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    },\n  },\n});\n\n// In your app.module.ts\nimport { AuthModule } from '@thallesp/nestjs-better-auth';\nimport { auth } from \"./auth\";\n\n@Module({\n  imports: [\n    AuthModule.forRoot({ auth }),\n  ],\n})\nexport class AppModule {}\n\n// In main.ts - CRITICAL!\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    bodyParser: false, // Required for Better Auth\n  });\n  await app.listen(3000);\n}\n```\n\n#### **Route Protection with Decorators**\n\n```typescript\nimport { Controller, Get } from '@nestjs/common';\nimport { Session, UserSession, AllowAnonymous, OptionalAuth } from '@thallesp/nestjs-better-auth';\n\n@Controller('users')\nexport class UserController {\n  @Get('me')\n  async getProfile(@Session() session: UserSession) {\n    return { user: session.user };\n  }\n\n  @Get('public')\n  @AllowAnonymous() // Allow anonymous access\n  async getPublic() {\n    return { message: 'Public route' };\n  }\n\n  @Get('optional')\n  @OptionalAuth() // Authentication is optional\n  async getOptional(@Session() session: UserSession) {\n    return { authenticated: !!session };\n  }\n}\n```\n\n### 4. **Authentication Methods to Consider**\n\n```typescript\nexport const auth = betterAuth({\n  // 1. Email & Password (Basic)\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: true,\n    minPasswordLength: 8,\n    sendResetPassword: async ({ user, url, token }) => {\n      // Integrate with your email microservice here\n      await fetch('http://localhost:3000/api/email/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          to: user.email,\n          subject: 'Reset Password',\n          body: `Click here: ${url}`,\n        }),\n      });\n    },\n  },\n  \n  // 2. Social Providers (OAuth)\n  socialProviders: {\n    google: { clientId: '...', clientSecret: '...' },\n    github: { clientId: '...', clientSecret: '...' },\n  },\n  \n  // 3. Advanced Features via Plugins\n  plugins: [\n    twoFactor(), // 2FA/TOTP\n    bearer(), // Bearer token auth for APIs\n    passkey(), // WebAuthn/Passkeys\n    jwt(), // JWT tokens\n    admin(), // Admin role management\n    organization(), // Multi-tenancy\n  ],\n});\n```\n\n### 5. **Security Considerations**\n\n#### **Critical Security Features**\n```typescript\nexport const auth = betterAuth({\n  // CSRF Protection\n  advanced: {\n    disableCSRFCheck: false, // Keep enabled\n    useSecureCookies: true, // HTTPS only\n    ipAddress: {\n      disableIpTracking: false, // Track for security\n      ipAddressHeaders: [\"x-forwarded-for\", \"x-real-ip\"],\n    },\n  },\n  \n  // Cross-Origin Configuration\n  trustedOrigins: [\n    \"https://yourdomain.com\",\n    \"https://app.yourdomain.com\",\n  ],\n  \n  // Session Security\n  session: {\n    expiresIn: 60 * 60 * 24 * 7, // 7 days\n    updateAge: 60 * 60 * 24, // 1 day\n    cookieCache: {\n      enabled: true,\n      maxAge: 60 * 5, // 5 minutes\n    },\n  },\n});\n```\n\n#### **Password Security**\n- Better Auth uses **Scrypt** by default (good!)\n- Consider enabling the **Have I Been Pwned** plugin:\n\n```typescript\nimport { haveIBeenPwned } from \"better-auth/plugins\";\n\nplugins: [\n  haveIBeenPwned(), // Prevents compromised passwords\n]\n```\n\n### 6. **Service-to-Service Authentication**\n\nFor your microservices architecture:\n\n```typescript\nimport { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    bearer(), // Enables Bearer token auth\n  ],\n});\n```\n\n**Client Services** can authenticate using Bearer tokens:\n\n```typescript\n// In other microservices\nconst response = await fetch('http://auth-service/api/resource', {\n  headers: {\n    'Authorization': `Bearer ${token}`,\n  },\n});\n```\n\n### 7. **Integration with Your Email Microservice**\n\nSince you already have `my-nest-js-email-microservice`, integrate it for:\n\n```typescript\nexport const auth = betterAuth({\n  emailAndPassword: {\n    sendResetPassword: async ({ user, url }) => {\n      // Call your email microservice\n      await yourEmailService.send({\n        to: user.email,\n        template: 'password-reset',\n        data: { resetUrl: url },\n      });\n    },\n  },\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url }) => {\n      await yourEmailService.send({\n        to: user.email,\n        template: 'email-verification',\n        data: { verifyUrl: url },\n      });\n    },\n  },\n});\n```\n\n### 8. **Frontend Client Setup**\n\nBetter Auth provides framework-specific clients:\n\n```typescript\n// For Next.js (your my-programs-app)\nimport { createAuthClient } from \"better-auth/react\";\n\nexport const authClient = createAuthClient({\n  baseURL: \"http://localhost:3000\", // Your auth service\n  plugins: [\n    // Add client-side plugins as needed\n  ],\n});\n\n// Usage\nconst { signIn, signUp, session } = authClient.useSession();\n```\n\n### 9. **Deployment & DevOps Considerations**\n\n- **Environment Variables**: You'll need many (DB URL, OAuth secrets, JWT secrets, etc.)\n- **Secrets Management**: Use proper secret management (AWS Secrets Manager, Azure Key Vault, etc.)\n- **Database Migrations**: Better Auth includes migration tools, but test thoroughly\n- **HTTPS**: Required for secure cookies and OAuth providers\n- **CORS**: Configure properly for cross-origin requests\n- **Rate Limiting**: Implement to prevent brute force attacks\n\n### 10. **Testing Strategy**\n\n```typescript\n// Unit Tests\n- Mock Better Auth service\n- Test route guards\n- Test session validation\n\n// Integration Tests\n- Test full auth flows (signup, login, logout)\n- Test password reset flow\n- Test OAuth flows (if using)\n- Test S2S authentication\n\n// E2E Tests (Playwright)\n- User signup flow\n- Login with email/password\n- Login with social providers\n- Password reset flow\n- Session persistence\n```\n\n### 11. **Recommended Architecture**\n\n```\n┌─────────────────────────────────────────┐\n│       Frontend (my-programs-app)        │\n│         Better Auth Client              │\n└───────────────┬─────────────────────────┘\n                │\n                │ HTTPS / Cookie-based\n                │\n┌───────────────▼─────────────────────────┐\n│    Auth Microservice (NestJS)           │\n│    - Better Auth Instance                │\n│    - User Management                     │\n│    - Session Management                  │\n│    - OAuth Providers                     │\n└───────┬─────────────────────┬───────────┘\n        │                     │\n        │ S2S (Bearer)        │ Email\n        │                     │\n┌───────▼──────────┐  ┌──────▼────────────┐\n│  Other Services  │  │ Email Microservice│\n│                  │  │                   │\n└──────────────────┘  └───────────────────┘\n```\n\n### 12. **Next Steps**\n\n1. **Create a new NestJS service** for auth: `npx nx g @nx/nest:app auth-service`\n2. **Install dependencies**: `npm install better-auth @thallesp/nestjs-better-auth`\n3. **Set up database** (PostgreSQL recommended)\n4. **Configure Better Auth** with your requirements\n5. **Integrate with email microservice** for verification emails\n6. **Add route protection** to your existing apps\n7. **Implement S2S auth** for microservice communication\n8. **Add comprehensive testing**\n9. **Document the API** (OpenAPI/Swagger)\n10. **Deploy with proper secrets management**\n\n### 13. **Potential Gotchas**\n\n⚠️ **CRITICAL**: Disable NestJS body parser (`bodyParser: false`) or Better Auth won't work\n⚠️ Better Auth uses its own cookie management - don't interfere with it\n⚠️ OAuth redirect URIs must be exact matches (including trailing slashes)\n⚠️ Database schema must match Better Auth expectations\n⚠️ Cross-domain cookies require `SameSite=None` and `Secure=true`\n\nWould you like me to help you create a specific implementation plan or generate the initial service structure for your auth microservice?",
              "toolCalls": [],
              "toolInputRetry": 0,
              "id": "ea1732d0-e21f-4f19-8166-bdee5c76fd22"
            }
          ],
          "toolCallResults": {
            "toolu_01Qww5m3cqM8fkjsV3fB5zRL__vscode-1760375232503": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 23,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "ctorName": "une",
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "ctorName": "Wt",
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 47,
                                  "text": "```typescript\n",
                                  "references": [
                                    {
                                      "anchor": {
                                        "$mid": 1,
                                        "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts",
                                        "_sep": 1,
                                        "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                        "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                        "scheme": "file"
                                      },
                                      "options": {
                                        "isFromTool": true
                                      }
                                    }
                                  ],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 47
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 46,
                                  "text": "import { Logger, ValidationPipe } from '@nestjs/common';\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 46
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 45,
                                  "text": "import { NestFactory } from '@nestjs/core';\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 45
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 44,
                                  "text": "import { AppModule } from './app/app.module';\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 44
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 43,
                                  "text": "import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 43
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 42,
                                  "text": "\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 42
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 41,
                                  "text": "async function bootstrap() {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 41
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 40,
                                  "text": "  const app = await NestFactory.create(AppModule);\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 40
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 39,
                                  "text": "  const globalPrefix = 'api';\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 39
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 38,
                                  "text": "  app.setGlobalPrefix(globalPrefix);\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 38
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 37,
                                  "text": "  app.useGlobalPipes(\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 37
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 36,
                                  "text": "    new ValidationPipe({\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 36
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 35,
                                  "text": "      whitelist: true, // Strip properties that do not have any decorators\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 35
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 34,
                                  "text": "      forbidNonWhitelisted: true, // Throw an error if non-whitelisted values are provided\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 34
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 33,
                                  "text": "      transform: true, // Automatically transform payloads to be objects typed according to their DTO classes\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 33
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 32,
                                  "text": "    }),\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 32
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 31,
                                  "text": "  );\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 31
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 30,
                                  "text": "  const config = new DocumentBuilder()\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 30
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 29,
                                  "text": "    .setTitle('Email Microservice API')\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 29
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 28,
                                  "text": "    .setDescription(\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 28
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 27,
                                  "text": "      'A NestJS microservice for sending emails via SMTP. Provides service-to-service email delivery with authentication and validation.',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 27
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 26,
                                  "text": "    )\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 26
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 25,
                                  "text": "    .setVersion('1.0')\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 25
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 24,
                                  "text": "    .addTag('email', 'Email sending operations')\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 24
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 23,
                                  "text": "    .addTag('health', 'Health check and monitoring endpoints')\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 23
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 22,
                                  "text": "    .addBearerAuth(\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 22
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 21,
                                  "text": "      {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 21
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 20,
                                  "text": "        type: 'http',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 20
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 19,
                                  "text": "        scheme: 'bearer',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 19
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 18,
                                  "text": "        bearerFormat: 'API Key',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 18
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 17,
                                  "text": "        description: 'Enter your API key (from API_KEY environment variable)',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 17
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 16,
                                  "text": "      },\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 16
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 15,
                                  "text": "      'bearer',\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 15
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 14,
                                  "text": "    )\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 14
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 13,
                                  "text": "    .build();\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 13
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 12,
                                  "text": "  const documentFactory = () => SwaggerModule.createDocument(app, config);\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 12
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 11,
                                  "text": "  SwaggerModule.setup('api/docs', app, documentFactory);\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 11
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 10,
                                  "text": "  const port = process.env.PORT || 3000;\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 10
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9,
                                  "text": "  await app.listen(port);\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 9
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 8,
                                  "text": "  Logger.log(\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 8
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 7,
                                  "text": "    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`,\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 7
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 6,
                                  "text": "  );\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 6
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 5,
                                  "text": "}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 5
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 4,
                                  "text": "\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 4
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 3,
                                  "text": "bootstrap();\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 3
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 2,
                                  "text": "\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 2
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 47,
                                  "text": "```",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 47
                              },
                              "references": []
                            }
                          ],
                          "props": {},
                          "references": []
                        }
                      ],
                      "props": {},
                      "references": []
                    }
                  }
                }
              ]
            },
            "toolu_01Bc5oQTrjWTsLFCAJ7byXit__vscode-1760375232504": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 23,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "ctorName": "une",
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "ctorName": "Wt",
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 93,
                                  "text": "```json\n",
                                  "references": [
                                    {
                                      "anchor": {
                                        "$mid": 1,
                                        "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\package.json",
                                        "_sep": 1,
                                        "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json",
                                        "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/package.json",
                                        "scheme": "file"
                                      },
                                      "options": {
                                        "isFromTool": true
                                      }
                                    }
                                  ],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 93
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 92,
                                  "text": "{\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 92
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 91,
                                  "text": "\t\"name\": \"@my-projects-monorepo/my-nest-js-email-microservice\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 91
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 90,
                                  "text": "\t\"version\": \"0.0.1\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 90
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 89,
                                  "text": "\t\"private\": false,\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 89
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 88,
                                  "text": "\t\"scripts\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 88
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 87,
                                  "text": "\t\t\"build\": \"nx build my-nest-js-email-microservice\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 87
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 86,
                                  "text": "\t\t\"docker:build\": \"docker build -t my-nest-js-email-microservice-image -f Dockerfile ../../\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 86
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 85,
                                  "text": "\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 85
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 84,
                                  "text": "\t\"nx\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 84
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 83,
                                  "text": "\t\t\"targets\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 83
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 82,
                                  "text": "\t\t\t\"build\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 82
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 81,
                                  "text": "\t\t\t\t\"executor\": \"nx:run-commands\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 81
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 80,
                                  "text": "\t\t\t\t\"options\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 80
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 79,
                                  "text": "\t\t\t\t\t\"command\": \"webpack-cli build\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 79
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 78,
                                  "text": "\t\t\t\t\t\"args\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 78
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 77,
                                  "text": "\t\t\t\t\t\t\"--node-env=production\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 77
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 76,
                                  "text": "\t\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 76
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 75,
                                  "text": "\t\t\t\t\t\"cwd\": \"services/my-nest-js-email-microservice\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 75
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 74,
                                  "text": "\t\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 74
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 73,
                                  "text": "\t\t\t\t\"configurations\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 73
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 72,
                                  "text": "\t\t\t\t\t\"development\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 72
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 71,
                                  "text": "\t\t\t\t\t\t\"args\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 71
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 70,
                                  "text": "\t\t\t\t\t\t\t\"--node-env=development\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 70
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 69,
                                  "text": "\t\t\t\t\t\t]\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 69
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 68,
                                  "text": "\t\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 68
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 67,
                                  "text": "\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 67
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 66,
                                  "text": "\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 66
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 65,
                                  "text": "\t\t\t\"prune-lockfile\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 65
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 64,
                                  "text": "\t\t\t\t\"dependsOn\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 64
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 63,
                                  "text": "\t\t\t\t\t\"build\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 63
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 62,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 62
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 61,
                                  "text": "\t\t\t\t\"cache\": true,\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 61
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 60,
                                  "text": "\t\t\t\t\"executor\": \"@nx/js:prune-lockfile\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 60
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 59,
                                  "text": "\t\t\t\t\"outputs\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 59
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 58,
                                  "text": "\t\t\t\t\t\"{workspaceRoot}/services/my-nest-js-email-microservice/dist/package.json\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 58
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 57,
                                  "text": "\t\t\t\t\t\"{workspaceRoot}/services/my-nest-js-email-microservice/dist/pnpm-lock.yaml\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 57
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 56,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 56
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 55,
                                  "text": "\t\t\t\t\"options\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 55
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 54,
                                  "text": "\t\t\t\t\t\"buildTarget\": \"build\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 54
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 53,
                                  "text": "\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 53
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 52,
                                  "text": "\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 52
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 51,
                                  "text": "\t\t\t\"copy-workspace-modules\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 51
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 50,
                                  "text": "\t\t\t\t\"dependsOn\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 50
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 49,
                                  "text": "\t\t\t\t\t\"build\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 49
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 48,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 48
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 47,
                                  "text": "\t\t\t\t\"cache\": true,\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 47
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 46,
                                  "text": "\t\t\t\t\"outputs\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 46
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 45,
                                  "text": "\t\t\t\t\t\"{workspaceRoot}/services/my-nest-js-email-microservice/dist/workspace_modules\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 45
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 44,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 44
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 43,
                                  "text": "\t\t\t\t\"executor\": \"@nx/js:copy-workspace-modules\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 43
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 42,
                                  "text": "\t\t\t\t\"options\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 42
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 41,
                                  "text": "\t\t\t\t\t\"buildTarget\": \"build\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 41
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 40,
                                  "text": "\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 40
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 39,
                                  "text": "\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 39
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 38,
                                  "text": "\t\t\t\"prune\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 38
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 37,
                                  "text": "\t\t\t\t\"dependsOn\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 37
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 36,
                                  "text": "\t\t\t\t\t\"prune-lockfile\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 36
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 35,
                                  "text": "\t\t\t\t\t\"copy-workspace-modules\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 35
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 34,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 34
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 33,
                                  "text": "\t\t\t\t\"executor\": \"nx:noop\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 33
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 32,
                                  "text": "\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 32
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 31,
                                  "text": "\t\t\t\"serve\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 31
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 30,
                                  "text": "\t\t\t\t\"continuous\": true,\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 30
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 29,
                                  "text": "\t\t\t\t\"executor\": \"@nx/js:node\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 29
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 28,
                                  "text": "\t\t\t\t\"defaultConfiguration\": \"development\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 28
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 27,
                                  "text": "\t\t\t\t\"dependsOn\": [\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 27
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 26,
                                  "text": "\t\t\t\t\t\"build\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 26
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 25,
                                  "text": "\t\t\t\t],\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 25
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 24,
                                  "text": "\t\t\t\t\"options\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 24
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 23,
                                  "text": "\t\t\t\t\t\"buildTarget\": \"@my-projects-monorepo/my-nest-js-email-microservice:build\",\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 23
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 22,
                                  "text": "\t\t\t\t\t\"runBuildTargetDependencies\": false\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 22
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 21,
                                  "text": "\t\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 21
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 20,
                                  "text": "\t\t\t\t\"configurations\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 20
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 19,
                                  "text": "\t\t\t\t\t\"development\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 19
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 18,
                                  "text": "\t\t\t\t\t\t\"buildTarget\": \"@my-projects-monorepo/my-nest-js-email-microservice:build:development\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 18
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 17,
                                  "text": "\t\t\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 17
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 16,
                                  "text": "\t\t\t\t\t\"production\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 16
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 15,
                                  "text": "\t\t\t\t\t\t\"buildTarget\": \"@my-projects-monorepo/my-nest-js-email-microservice:build:production\"\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 15
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 14,
                                  "text": "\t\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 14
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 13,
                                  "text": "\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 13
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 12,
                                  "text": "\t\t\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 12
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 11,
                                  "text": "\t\t\t\"test\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 11
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 10,
                                  "text": "\t\t\t\t\"options\": {\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 10
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9,
                                  "text": "\t\t\t\t\t\"passWithNoTests\": true\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 9
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 8,
                                  "text": "\t\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 8
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 7,
                                  "text": "\t\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 7
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 6,
                                  "text": "\t\t}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 6
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 5,
                                  "text": "\t},\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 5
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 4,
                                  "text": "\t\"dependencies\": {}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 4
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 3,
                                  "text": "}\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 3
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 2,
                                  "text": "\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 2
                              },
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "cle",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 93,
                                  "text": "```",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {
                                "priority": 93
                              },
                              "references": []
                            }
                          ],
                          "props": {},
                          "references": []
                        }
                      ],
                      "props": {},
                      "references": []
                    }
                  }
                }
              ]
            },
            "toolu_013cPWMK5rnANK9hramSQAjZ__vscode-1760375232505": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 23,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "ctorName": "gqe",
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "ctorName": "wke",
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "pI",
                              "children": [
                                {
                                  "type": 1,
                                  "ctor": 2,
                                  "ctorName": "yP",
                                  "children": [
                                    {
                                      "type": 1,
                                      "ctor": 2,
                                      "ctorName": "C2",
                                      "children": [
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md` starting at line 788:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md\n# TLS/HTTPS Setup Guide for NGINX\n...\n## Support\n\nFor issues specific to this implementation:\n1. Check the [Troubleshooting](#troubleshooting) section\n2. Review NGINX logs: `docker logs nginx-proxy-edge`\n3. Validate configuration: `nx run nginx:validate-config`\n4. Check health status: `nx run nginx:health-check`\n\n---\n\n**Last Updated:** October 2025  \n**Version:** 1.0.0\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.03125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md` starting at line 39:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md\n# TLS/HTTPS Setup Guide for NGINX\n...\n## Quick Start\n\n### For Development (Self-Signed Certificates)\n\n```bash\n# 1. Generate development certificates\nnx run nginx:tls:generate-dev-certs\n\n# 2. Start NGINX with TLS\ndocker compose -f tools/nginx/docker-compose.yaml -f tools/nginx/docker-compose.tls.yaml up -d\n\n# 3. Test HTTPS\ncurl -k https://localhost/health\n```\n\n### For Production (Let's Encrypt)\n\n```bash\n# 1. Generate Let's Encrypt certificates\nnx run nginx:tls:setup-letsencrypt -- --domain yourdomain.com --email your@email.com\n\n# 2. Start NGINX in production mode with TLS\ndocker compose -f tools/nginx/docker-compose.yaml -f tools/nginx/docker-compose.prod.yaml -f tools/nginx/docker-compose.tls.yaml up -d\n\n# 3. Verify HTTPS\ncurl https://yourdomain.com/health\n```\n\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.03125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.0625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\implementation-plan.md` starting at line 7:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\implementation-plan.md\n# Implementation Plan: Secure Credential Management\n...\n## Requirements\n\n- The `@nestjs/config` module must be integrated into the application.\n- A dedicated `validation.ts` file will be created to define a validation schema for environment variables using `Joi`.\n- The `AppModule` will be updated to import and configure the `ConfigModule` globally.\n- The `SmtpModule` will be refactored to dynamically receive its configuration from the `ConfigService`.\n- The application must terminate with a descriptive error message if any required environment variables are missing at startup.\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.0625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.09375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\instructions.md` starting at line 5:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\instructions.md\n# Instructions: Secure Credential Management\n...\n## 1. Install Dependencies\n\nFirst, add the necessary packages to the project.\n\n```sh\npnpm add -w @nestjs/config joi\n```\n\n## 2. Create Environment Variable Schema\n\nCreate a validation schema to ensure that all required environment variables are present at startup.\n\n### Create New File: `services/my-nest-js-email-microservice/src/config/validation.ts`\n\n**Content:**\n\n```typescript\nimport * as Joi from 'joi';\n\nexport const validationSchema = Joi.object({\n  SMTP_HOST: Joi.string().required(),\n  SMTP_PORT: Joi.number().required(),\n  SMTP_USER: Joi.string().required(),\n  SMTP_PASS: Joi.string().required(),\n  API_KEY: Joi.string().required(),\n});\n```\n\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.09375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\IMPLEMENTATION_VALIDATION.md` starting at line 37:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\IMPLEMENTATION_VALIDATION.md\n# Unit Test Implementation Validation Summary\n...\n## Test Coverage Summary\n\n### Total Test Cases: 37\n\n#### Auth Layer (10 test cases)\n- ✅ BetterAuthService: 4 tests\n  - Valid token validation\n  - Invalid token rejection\n  - Empty token handling\n  - Whitespace token handling\n\n- ✅ S2SAuthGuard: 6 tests\n  - Valid bearer token authorization\n  - Missing authorization header\n  - Malformed authorization header\n  - Invalid scheme (non-Bearer)\n  - Invalid token\n  - Empty bearer token\n\n#### DTO Validation (8 test cases)\n- ✅ SendEmailDto: 8 tests\n  - Valid payload validation\n  - Invalid email format\n  - Empty \"to\" field\n  - Missing subject\n  - Missing body\n  - Multiple missing fields\n  - Non-string subject\n  - Non-string body\n\n  ...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.15625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh` starting at line 238:\n```sh\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh\n...\n            print_success \"Created: $dir\"\n        else\n            print_info \"Already exists: $dir\"\n        fi\n    done\n    \n    # Set proper permissions\n    chmod -R 755 \"${VOLUMES_DIR}/certbot-webroot\"\n    print_success \"Set permissions on webroot directory\"\n    \n    echo \"\"\n}\n\ncreate_env_file() {\n    print_step \"4/10\" \"Creating environment configuration...\"\n    \n    local env_file=\"${WORKSPACE_ROOT}/.env.certbot\"\n    \n    if [ \"$DRY_RUN\" = true ]; then\n        print_info \"[DRY RUN] Would create .env.certbot file\"\n        echo \"\"\n        return\n    fi\n    \n    # Build domain list\n    local domain_list=\"$DOMAIN\"\n    if [ -n \"$ADDITIONAL_DOMAINS\" ]; then\n        domain_list=\"${domain_list},${ADDITIONAL_DOMAINS}\"\n    fi\n    \n    cat > \"$env_file\" << EOF\n# Certbot Configuration\n# Generated by setup-integration.sh on $(date)\n\n# Let's Encrypt Configuration\nCERTBOT_EMAIL=${EMAIL}\nCERTBOT_DOMAINS=${domain_list}\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.15625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.1875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 78:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n...\n## 3. Implement the Authentication Guard\n...\n### File to Edit: `services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts`\n...\n   throw new UnauthorizedException('Missing or invalid authorization header');\n  }\n\n  const token = authHeader.split(' ')[1];\n  const isValid = this.betterAuthService.validateToken(token);\n\n  if (!isValid) {\n   throw new UnauthorizedException('Invalid token');\n  }\n\n  return true;\n }\n}\n```\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.1875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.21875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 5:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n...\n## 1. Install Dependency\n\nFirst, install the in-house authentication library.\n\n**Action:**\n\n- Run the following command in your terminal:\n\n```sh\npnpm -w add @my-org/better-auth\n```\n\n*Note: Since this is a fictional package, this command will fail. We will proceed by creating a mock implementation.*\n\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.21875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.25,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 48:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n...\n## 3. Implement the Authentication Guard\n\nNow, create the NestJS guard that will use the authentication service.\n\n### File to Edit: `services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts`\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.25
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.28125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md` starting at line 62:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md\n...\n## Detailed Tasks\n\n### 1. Test Bed Preparation\n...\n### 2. Auth Layer Specs\n...\n### 3. DTO and Config Specs\n...\n### 4. Service Behaviour Specs\n...\n### 5. Repository Hygiene\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.28125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.3125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\scripts\\tls\\generate-dev-certs.sh` starting at line 89:\n```sh\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\scripts\\tls\\generate-dev-certs.sh\n...\nST = ${STATE}\nL = ${CITY}\nO = ${ORG}\nOU = ${ORG_UNIT}\nCN = ${COMMON_NAME}\n\n[v3_req]\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = ${ALT_NAMES}\n\n[v3_ca]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\nEOF\necho -e \"${GREEN}✓ Configuration created${NC}\"\necho \"\"\n\n# Generate self-signed certificate\necho -e \"${YELLOW}[4/5] Generating self-signed certificate (valid for ${CERT_DAYS} days)...${NC}\"\nopenssl req -new -x509 \\\n    -key \"${SECRETS_DIR}/key.pem\" \\\n    -out \"${SECRETS_DIR}/cert.pem\" \\\n    -days ${CERT_DAYS} \\\n    -config \"${SECRETS_DIR}/openssl.cnf\" \\\n    -extensions v3_req \\\n    2>/dev/null\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.3125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.34375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md` starting at line 33:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md\n# Implementation Plan: Service-to-Service Authentication\n...\n## Technical Considerations\n\n### System Architecture Overview\n...\n    I -- \"6. Forward to\" --> J(EmailController);\n\n    style C fill:#f9f,stroke:#333,stroke-width:2px\n```\n\n- **Technology Stack Selection**:\n  - **Nest.js Guards**: The ideal choice for implementing authentication in a Nest.js application. Guards are executed before the route handler and determine whether a given request will be handled by the route handler or not.\n  - **`@my-org/better-auth`**: The organization's standard library for S2S authentication. Using it ensures consistency, security, and leverages pre-existing logic for token validation, including fetching and caching of JWKS (JSON Web Key Sets).\n\n- **Integration Points**:\n  - **Nest.js Request Pipeline**: The `S2SAuthGuard` will be a key component in the application's request lifecycle.\n  ...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.34375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 117:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n...\n## 5. Verify the Implementation\n\n- **Start the Service:**\n\n    ```sh\n    nx serve @my-projects-monorepo/my-nest-js-email-microservice\n    ```\n\n- **Test Scenarios:**\n  - **No Token:** Send a `POST` request to `http://localhost:3000/email/send`. It should fail with a `401 Unauthorized` error.\n  - **Invalid Token:** Send the request with an `Authorization` header of `Bearer invalid-token`. It should fail with a `401 Unauthorized` error.\n  - **Valid Token:** Send the request with an `Authorization` header of `Bearer valid-token`. It should succeed with a `202 Accepted` response.\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.40625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts` starting at line 7:\n```ts\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts\n/*...*/\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  app.useGlobalPipes(\n    new ValidationPipe({\n      whitelist: true, // Strip properties that do not have any decorators\n      forbidNonWhitelisted: true, // Throw an error if non-whitelisted values are provided\n      transform: true, // Automatically transform payloads to be objects typed according to their DTO classes\n    }),\n  );\n  const config = new DocumentBuilder()\n    .setTitle('Email Microservice API')\n    .setDescription(\n      'A NestJS microservice for sending emails via SMTP. Provides service-to-service email delivery with authentication and validation.',\n    )\n    .setVersion('1.0')\n    .addTag('email', 'Email sending operations')\n    .addTag('health', 'Health check and monitoring endpoints')\n    .addBearerAuth(\n      {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'API Key',\n        /*...*/\n}\n/*...*/\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.40625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.4375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\architecture\\overview.md` starting at line 223:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\architecture\\overview.md\n# Architecture Overview\n...\n## Security Architecture\n\n### Security Layers\n\n1. **Network Security**\n   - HTTPS/TLS encryption\n   - Rate limiting\n   - DDoS protection\n\n2. **Application Security**\n   - Input validation\n   - Authentication\n   - Authorization\n   - CORS policies\n\n3. **Data Security**\n   - Encrypted at rest\n   - Encrypted in transit\n   - Access controls\n\n### Authentication & Authorization\n\n- **JWT Tokens**: _(planned)_ Token-based auth\n- **API Keys**: _(planned)_ Service-to-service auth\n- **OAuth**: _(planned)_ Third-party auth\n- **RBAC**: _(planned)_ Role-based access control\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.4375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.46875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\monorepo\\architecture\\overview.md` starting at line 223:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\monorepo\\architecture\\overview.md\n# Architecture Overview\n...\n## Security Architecture\n\n### Security Layers\n\n1. **Network Security**\n   - HTTPS/TLS encryption\n   - Rate limiting\n   - DDoS protection\n\n2. **Application Security**\n   - Input validation\n   - Authentication\n   - Authorization\n   - CORS policies\n\n3. **Data Security**\n   - Encrypted at rest\n   - Encrypted in transit\n   - Access controls\n\n### Authentication & Authorization\n\n- **JWT Tokens**: _(planned)_ Token-based auth\n- **API Keys**: _(planned)_ Service-to-service auth\n- **OAuth**: _(planned)_ Third-party auth\n- **RBAC**: _(planned)_ Role-based access control\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.46875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.5,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md` starting at line 87:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md\n# Implementation Plan: Service-to-Service Authentication\n...\n## Technical Considerations\n...\n### Security & Performance\n\n- **Security**:\n  - We are delegating the core JWT validation logic to the specialized `@my-org/better-auth` library, which is assumed to be vetted and secure.\n  - The guard will prevent any unauthenticated access to the service's business logic.\n- **Performance**:\n  - The guard adds a single, fast check to the request lifecycle. The performance overhead is expected to be minimal, especially with public key caching handled by the auth library.\n- **Testability**:\n  - The `S2SAuthGuard` can be easily mocked in unit tests for the `EmailController` by using Nest.js's `overrideGuard` method in the `TestBed`.\n  - Integration tests should be written to cover the authentication flow with real and invalid tokens to ensure the guard is working correctly in the request pipeline.\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.5
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.53125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice-e2e\\src\\support\\test-setup.ts` starting at line 1:\n```ts\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice-e2e\\src\\support\\test-setup.ts\n/* eslint-disable */\nimport axios from 'axios';\n\nmodule.exports = async function () {\n\t// Configure axios for tests to use.\n\tconst host = process.env.HOST ?? 'localhost';\n\tconst port = process.env.PORT ?? '3000';\n\taxios.defaults.baseURL = `http://${host}:${port}`;\n};\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.53125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.5625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.ts` starting at line 1:\n```ts\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.ts\nimport {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { BetterAuthService } from './better-auth.service';\n\n@Injectable()\nexport class S2SAuthGuard implements CanActivate {\n  constructor(private readonly betterAuthService: BetterAuthService) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Missing or invalid authorization header');\n    }\n\n    const token = authHeader.split(' ')[1];\n    const isValid = this.betterAuthService.validateToken(token);\n\n    if (!isValid) {\n      throw new UnauthorizedException('Invalid token');\n    }\n\n    return true;\n  }\n}\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.5625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.59375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md` starting at line 34:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md\n...\n## Milestones\n\n1. **Test Bed Preparation**\n\n- Create `services/my-nest-js-email-microservice/test/fixtures/email.ts` exporting shared DTO payloads and tokens.\n- Update `tsconfig.spec.json` includes or Jest module paths if the new fixtures folder is not auto-resolved.\n\n2. **Auth Layer Specs**\n\n- Author `auth/better-auth.service.spec.ts` verifying `validateToken` truth table.\n- Add `auth/s2s-auth.guard.spec.ts` stubbing `ExecutionContext` to exercise success and error branches.\n\n3. **DTO and Config Specs**\n\n- Write `app/dto/send-email.dto.spec.ts` using `class-validator` `validate` helper for positive and negative cases.\n- Cover `config/validation.spec.ts` asserting Joi schema acceptance and descriptive failures for missing keys.\n\n4. **Service Behaviour Specs**\n\n- Replace legacy `app/app.controller.spec.ts` with focused `app/app.service.spec.ts` exercising success and failure logging.\n- Add `smtp/smtp.service.spec.ts` verifying delegation to injected transport and rejection propagation.\n\n5. **Repository Hygiene**\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.59375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\libs\\utilities\\architecture\\overview.md` starting at line 223:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\libs\\utilities\\architecture\\overview.md\n# Architecture Overview\n...\n## Security Architecture\n\n### Security Layers\n\n1. **Network Security**\n   - HTTPS/TLS encryption\n   - Rate limiting\n   - DDoS protection\n\n2. **Application Security**\n   - Input validation\n   - Authentication\n   - Authorization\n   - CORS policies\n\n3. **Data Security**\n   - Encrypted at rest\n   - Encrypted in transit\n   - Access controls\n\n### Authentication & Authorization\n\n- **JWT Tokens**: _(planned)_ Token-based auth\n- **API Keys**: _(planned)_ Service-to-service auth\n- **OAuth**: _(planned)_ Third-party auth\n- **RBAC**: _(planned)_ Role-based access control\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.65625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 3:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n\nThis document provides a step-by-step guide to implement service-to-service (S2S) authentication in the `my-nest-js-email-microservice`.\n\n## 1. Install Dependency\n...\n## 2. Create a Mock Authentication Library\n...\n## 3. Implement the Authentication Guard\n...\n## 4. Update the Application Module\n...\n## 5. Verify the Implementation\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.65625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.6875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh` starting at line 28:\n```sh\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh\n...\n#   --help                      Show this help message\n#\n# =================================================================================================\n\nset -euo pipefail\n\n# Color codes for output\nreadonly RED='\\033[0;31m'\nreadonly GREEN='\\033[0;32m'\nreadonly YELLOW='\\033[1;33m'\nreadonly BLUE='\\033[0;34m'\nreadonly CYAN='\\033[0;36m'\nreadonly NC='\\033[0m' # No Color\n\n# Script directory and workspace root\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nreadonly WORKSPACE_ROOT=\"$(cd \"${SCRIPT_DIR}/../../..\" && pwd)\"\nreadonly CERTBOT_DIR=\"${WORKSPACE_ROOT}/tools/certbot\"\nreadonly NGINX_DIR=\"${WORKSPACE_ROOT}/tools/nginx\"\nreadonly VOLUMES_DIR=\"${WORKSPACE_ROOT}/volumes\"\n\n# Configuration variables\nDOMAIN=\"\"\nEMAIL=\"\"\nSTAGING=false\nADDITIONAL_DOMAINS=\"\"\nDRY_RUN=false\n\n# =================================================================================================\n# Helper Functions\n# =================================================================================================\n\nprint_header() {\n    echo -e \"${BLUE}=================================================================================================${NC}\"\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.6875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.71875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts` starting at line 30:\n```ts\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts\n/*...*/\nasync function bootstrap() {\n  /*...*/\n        description: 'Enter your API key (from API_KEY environment variable)',\n      },\n      'bearer',\n    )\n    .build();\n  const documentFactory = () => SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api/docs', app, documentFactory);\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`,\n  );\n}\n/*...*/\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.71875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.75,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\tools\\nginx\\architecture\\overview.md` starting at line 217:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\tools\\nginx\\architecture\\overview.md\n# Architecture Overview\n...\n## Security Architecture\n\n### Security Layers\n\n1. **Network Security**\n   - HTTPS/TLS encryption\n   - Rate limiting\n   - DDoS protection\n\n2. **Application Security**\n   - Input validation\n   - Authentication\n   - Authorization\n   - CORS policies\n\n3. **Data Security**\n   - Encrypted at rest\n   - Encrypted in transit\n   - Access controls\n\n### Authentication & Authorization\n\n- **JWT Tokens**: _(planned)_ Token-based auth\n- **API Keys**: _(planned)_ Service-to-service auth\n- **OAuth**: _(planned)_ Third-party auth\n- **RBAC**: _(planned)_ Role-based access control\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.75
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.78125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md` starting at line 62:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md\n...\n## Detailed Tasks\n\n### 1. Test Bed Preparation\n\n- Create fixtures file providing `validSendEmailDto`, `invalidEmailDto`, `validToken`, and `invalidToken` constants.\n- Export helper to clone DTOs for mutation-free scenarios.\n- Adjust Jest path aliases in `jest.config.ts` if imports use `@fixtures` shorthand; otherwise rely on relative paths.\n- Verify TypeScript picks up the fixtures by running the existing test target (expect no build errors).\n\n### 2. Auth Layer Specs\n\n- In `better-auth.service.spec.ts`, instantiate the service directly and assert boolean outcomes for valid/invalid tokens.\n- For guard tests, mock `BetterAuthService` responses and build a fake HTTP request within a stubbed `ExecutionContext`.\n- Cover error messaging for missing header, malformed scheme, and invalid token; ensure the happy path returns `true`.\n\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.78125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.8125,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.spec.ts` starting at line 1:\n```ts\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.spec.ts\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { S2SAuthGuard } from './s2s-auth.guard';\nimport { BetterAuthService } from './better-auth.service';\nimport { validToken, invalidToken } from '../../test/fixtures/email';\n\ndescribe('S2SAuthGuard', () => {\n\tlet guard: S2SAuthGuard;\n\tlet betterAuthService: BetterAuthService;\n\n\tbeforeEach(() => {\n\t\tbetterAuthService = new BetterAuthService();\n\t\tguard = new S2SAuthGuard(betterAuthService);\n\t});\n\n\tconst createMockExecutionContext = (\n\t\tauthHeader?: string,\n\t): ExecutionContext => {\n\t\treturn {\n\t\t\tswitchToHttp: () => ({\n\t\t\t\tgetRequest: () => ({\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tauthorization: authHeader,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t}),\n\t\t} as ExecutionContext;\n\t};\n\n\tdescribe('canActivate', () => {\n\t\tit('should return true for valid bearer token', () => {\n\t\t\tconst context = createMockExecutionContext(`Bearer ${validToken}`);\n\t\t\tconst result = guard.canActivate(context);\n\t\t\texpect(result).toBe(true);\n\t\t});\n\t\t/*...*/\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.8125
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.84375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md` starting at line 61:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md\n# Implementation Plan: Service-to-Service Authentication\n...\n## Technical Considerations\n...\n### Implementation Details\n\n1. **Install Dependency**:\n\n   ```sh\n   pnpm -w install @my-org/better-auth\n   ```\n\n2. **`s2s-auth.guard.ts`**:\n   - Create a class `S2SAuthGuard` that implements `CanActivate`.\n   - Inject the validation service provided by `@my-org/better-auth`.\n   - In the `canActivate` method:\n     - Extract the request object from the `ExecutionContext`.\n     - Retrieve the JWT from the `Authorization: Bearer <token>` header.\n     - If no token is present, return `false` or throw an `UnauthorizedException`.\n     - Call the `better-auth` validation method with the token.\n     - The validation method should handle signature, expiry, and issuer checks.\n     - Return `true` if the token is valid, `false` otherwise.\n\n3. **`email.controller.ts`**:\n   ...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.84375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md` starting at line 52:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md\n# Instructions for Service-to-Service Authentication\n...\n## 3. Implement the Authentication Guard\n...\n### File to Edit: `services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts`\n\n**Action:**\n\n- Update the existing placeholder guard with the logic to call the `BetterAuthService`.\n- Inject `BetterAuthService`.\n- In the `canActivate` method, extract the token from the `Authorization` header and validate it.\n\n**New Code (`s2s-auth.guard.ts`):**\n\n```typescript\nimport {\n Injectable,\n CanActivate,\n ExecutionContext,\n UnauthorizedException,\n} from '@nestjs/common';\nimport { BetterAuthService } from './better-auth.service';\n\n@Injectable()\nexport class S2SAuthGuard implements CanActivate {\n constructor(private readonly betterAuthService: BetterAuthService) {}\n\n canActivate(context: ExecutionContext): boolean {\n  const request = context.switchToHttp().getRequest();\n  const authHeader = request.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.875
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.90625,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md` starting at line 44:\n```md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md\n# Implementation Plan: Service-to-Service Authentication\n...\n## Technical Considerations\n\n### System Architecture Overview\n...\n  - **Configuration**: The guard will likely need configuration from the application's central config service to determine the expected issuer or other token claims.\n\n- **Scalability Considerations**: The `better-auth` library is assumed to be built for performance, likely caching public keys to avoid repeated lookups for every request. As a result, the performance impact of the authentication check should be negligible and scale with the application.\n...\n```\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.90625
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.9375,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md` starting at line 48:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md\n# Implementation Plan: Service-to-Service Authentication\n...\n## Technical Considerations\n...\n### File Structure\n\nThe following files will be created/modified within `services/my-nest-js-email-microservice/src/`:\n\n```sh\nauth/\n└── s2s-auth.guard.ts  // The new guard implementation\nemail/\n└── email.controller.ts // Modified to apply the guard\n```\n\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.9375
                                          },
                                          "references": []
                                        },
                                        {
                                          "type": 1,
                                          "ctor": 2,
                                          "ctorName": "cle",
                                          "children": [
                                            {
                                              "type": 2,
                                              "priority": 100.96875,
                                              "text": "Here is a potentially relevant text excerpt in `c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-email-api\\instructions.md` starting at line 66:\n````md\n// filepath: c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-email-api\\instructions.md\n# Instructions for Secure Email API\n...\n## 3. Create a Placeholder Authentication Guard\n\nTo make the controller work before the full authentication feature is built, create a placeholder guard.\n\n**Action:**\n\n- Create a new directory: `services/my-nest-js-email-microservice/src/auth`\n- Create a new file: `services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts`\n- Add the following code. This guard will simply allow all requests to pass for now.\n\n**File Content (`s2s-auth.guard.ts`):**\n\n```typescript\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class S2SAuthGuard implements CanActivate {\n canActivate(\n  context: ExecutionContext,\n ): boolean | Promise<boolean> | Observable<boolean> {\n  // For now, this guard will always return true.\n  // It will be replaced with a real authentication mechanism.\n  return true;\n }\n}\n```\n\n...\n````\n\n",
                                              "references": [],
                                              "lineBreakBefore": true
                                            }
                                          ],
                                          "props": {
                                            "priority": 100.96875
                                          },
                                          "references": []
                                        }
                                      ],
                                      "props": {
                                        "priority": 100
                                      },
                                      "references": [
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-email-api\\instructions.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-email-api/instructions.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-email-api/instructions.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 65,
                                                "character": 0
                                              },
                                              {
                                                "line": 93,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 32,
                                                "character": 0
                                              },
                                              {
                                                "line": 43,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 43,
                                                "character": 0
                                              },
                                              {
                                                "line": 46,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 47,
                                                "character": 0
                                              },
                                              {
                                                "line": 58,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 60,
                                                "character": 0
                                              },
                                              {
                                                "line": 78,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 86,
                                                "character": 0
                                              },
                                              {
                                                "line": 96,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 2,
                                                "character": 0
                                              },
                                              {
                                                "line": 117,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\service-to-service-authentication\\instructions.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/service-to-service-authentication/instructions.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 116,
                                                "character": 0
                                              },
                                              {
                                                "line": 128,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.spec.ts",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.spec.ts",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.spec.ts",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 0,
                                                "character": 0
                                              },
                                              {
                                                "line": 34,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 33,
                                                "character": 0
                                              },
                                              {
                                                "line": 54,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\docs\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/docs/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 61,
                                                "character": 0
                                              },
                                              {
                                                "line": 91,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\tools\\nginx\\architecture\\overview.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/tools/nginx/architecture/overview.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/tools/nginx/architecture/overview.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 216,
                                                "character": 0
                                              },
                                              {
                                                "line": 243,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 6,
                                                "character": 0
                                              },
                                              {
                                                "line": 29,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\main.ts",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/main.ts",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 29,
                                                "character": 0
                                              },
                                              {
                                                "line": 41,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 27,
                                                "character": 0
                                              },
                                              {
                                                "line": 61,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\certbot\\scripts\\setup-integration.sh",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/certbot/scripts/setup-integration.sh",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 237,
                                                "character": 0
                                              },
                                              {
                                                "line": 274,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\libs\\utilities\\architecture\\overview.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/libs/utilities/architecture/overview.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/libs/utilities/architecture/overview.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 222,
                                                "character": 0
                                              },
                                              {
                                                "line": 249,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\src\\auth\\s2s-auth.guard.ts",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/src/auth/s2s-auth.guard.ts",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 0,
                                                "character": 0
                                              },
                                              {
                                                "line": 30,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice-e2e\\src\\support\\test-setup.ts",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice-e2e/src/support/test-setup.ts",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice-e2e/src/support/test-setup.ts",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 0,
                                                "character": 0
                                              },
                                              {
                                                "line": 9,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\monorepo\\architecture\\overview.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/monorepo/architecture/overview.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/monorepo/architecture/overview.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 222,
                                                "character": 0
                                              },
                                              {
                                                "line": 249,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\architecture\\overview.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/architecture/overview.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/architecture/overview.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 222,
                                                "character": 0
                                              },
                                              {
                                                "line": 249,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\scripts\\tls\\generate-dev-certs.sh",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/scripts/tls/generate-dev-certs.sh",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/scripts/tls/generate-dev-certs.sh",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 88,
                                                "character": 0
                                              },
                                              {
                                                "line": 117,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\services\\my-nest-js-email-microservice\\IMPLEMENTATION_VALIDATION.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/IMPLEMENTATION_VALIDATION.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/services/my-nest-js-email-microservice/IMPLEMENTATION_VALIDATION.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 36,
                                                "character": 0
                                              },
                                              {
                                                "line": 62,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\instructions.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/instructions.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/instructions.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 4,
                                                "character": 0
                                              },
                                              {
                                                "line": 32,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\docs\\services\\my-nest-js-email-microservice\\epics\\nest-js-email-microservice\\features\\secure-credential-management\\implementation-plan.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/implementation-plan.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/docs/services/my-nest-js-email-microservice/epics/nest-js-email-microservice/features/secure-credential-management/implementation-plan.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 6,
                                                "character": 0
                                              },
                                              {
                                                "line": 14,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 38,
                                                "character": 0
                                              },
                                              {
                                                "line": 66,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        },
                                        {
                                          "anchor": {
                                            "uri": {
                                              "$mid": 1,
                                              "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\tools\\nginx\\TLS_SETUP.md",
                                              "_sep": 1,
                                              "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                                              "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/tools/nginx/TLS_SETUP.md",
                                              "scheme": "file"
                                            },
                                            "range": [
                                              {
                                                "line": 787,
                                                "character": 0
                                              },
                                              {
                                                "line": 799,
                                                "character": 0
                                              }
                                            ]
                                          },
                                          "options": {
                                            "isFromTool": true
                                          }
                                        }
                                      ]
                                    }
                                  ],
                                  "props": {
                                    "priority": 100
                                  },
                                  "references": []
                                }
                              ],
                              "props": {
                                "priority": 100
                              },
                              "references": []
                            }
                          ],
                          "props": {},
                          "references": []
                        }
                      ],
                      "props": {
                        "priority": 100
                      },
                      "references": []
                    }
                  }
                }
              ]
            },
            "toolu_01U4Q9j9oy7z7Axo533VPu32__vscode-1760375232506": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: Better Auth\n- Context7-compatible library ID: /websites/www_better-auth_com-docs-introduction\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript. It offers comprehensive features and a plugin ecosystem for advanced functionalities like 2FA, multi-tenancy, and SSO.\n- Code Snippets: 1\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /better-auth/better-auth\n- Description: Better Auth is a framework-agnostic authentication and authorization library for TypeScript, offering a comprehensive feature set and a plugin ecosystem for advanced functionalities.\n- Code Snippets: 1326\n- Trust Score: 7.6\n- Versions: v1.2.9, better-auth@1.3.4, v1_3_8, v1_3_10_beta_6, _better_auth_stripe_1_3_4\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /websites/better-auth\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript, offering a comprehensive feature set and a plugin ecosystem for advanced functionalities like 2FA and SSO.\n- Code Snippets: 476\n- Trust Score: 7.5\n----------\n- Title: Better Auth Microsoft Graph\n- Context7-compatible library ID: /zpg6/better-auth-microsoft-graph\n- Description: Seamlessly integrate better-auth with Microsoft Graph API to access user profile, calendar, contacts, mail, OneDrive, and more!\n- Code Snippets: 15\n- Trust Score: 7.5\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /llmstxt/better-auth_llms_txt\n- Description: Better Auth is a flexible authentication library that supports email/password, social providers, and can be extended with plugins like username, magic link, and passkey.\n- Code Snippets: 3312\n- Trust Score: 8\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /llmstxt/better-auth-ui_llms_txt\n- Description: Better Auth UI provides ready-to-use shadcn/ui styled components for rapidly implementing authentication features in Next.js and React applications, seamlessly integrating with better-auth.\n- Code Snippets: 1136\n- Trust Score: 8\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /daveyplate/better-auth-ui\n- Description: Plug and play shadcn/ui authentication components for better-auth, offering customizable sign-in, sign-up, password reset, user buttons, and email templates.\n- Code Snippets: 169\n- Trust Score: 6\n----------\n- Title: Better Auth (llmstxt)\n- Context7-compatible library ID: /www.better-auth.com/llmstxt\n- Description: Better Auth is a framework-agnostic authentication and authorization framework for TypeScript, providing out-of-the-box features and a plugin ecosystem for advanced auth functionalities.\n- Code Snippets: 8819\n- Trust Score: 7\n----------\n- Title: Better Auth UI\n- Context7-compatible library ID: /websites/better-auth-ui\n- Description: Better Auth UI provides ready-to-use shadcn/ui styled components for rapidly implementing customizable authentication features in Next.js and React applications, seamlessly integrating with `better-auth`.\n- Code Snippets: 188\n- Trust Score: 7.5\n----------\n- Title: Better Auth\n- Context7-compatible library ID: /get-convex/better-auth\n- Description: Convex Better Auth is a component that integrates Better Auth with Convex for enhanced authentication in applications.\n- Code Snippets: 130\n- Trust Score: 9.9\n----------\n- Title: Better Auth (llmstxt)\n- Context7-compatible library ID: /llmstxt/better-auth_com-llms.txt\n- Description: Better Auth is a flexible authentication solution providing built-in support for email/password and social logins, with easy extensibility through plugins.\n- Code Snippets: 11027\n- Trust Score: 8\n----------\n- Title: Better Auth Harmony\n- Context7-compatible library ID: /gekorm/better-auth-harmony\n- Description: A better-auth plugin for email and phone normalization and additional validation, blocking over 55,000 temporary email domains.\n- Code Snippets: 19\n- Trust Score: 8.4\n----------\n- Title: Better Auth Cloudflare\n- Context7-compatible library ID: /zpg6/better-auth-cloudflare\n- Description: Seamlessly integrate better-auth with Cloudflare Workers, D1, KV, and geolocation services. Available as NPM package and project template.\n- Code Snippets: 67\n- Trust Score: 7.5\n----------\n- Title: Better-Auth PocketBase\n- Context7-compatible library ID: /000alen/better-auth-pocketbase\n- Description: A PocketBase adapter for better-auth, offering automatic schema migrations and type-safe authentication with a plugin system.\n- Code Snippets: 3\n- Trust Score: 8.2\n----------\n- Title: Better Auth Swift\n- Context7-compatible library ID: /ouwargui/betterauthswift\n- Description: Better Auth Swift is a community-driven client library that simplifies the integration of the Better Auth authentication service into Swift applications, offering easy-to-use bindings and plugin support.\n- Code Snippets: 48\n- Trust Score: 7.5\n----------\n- Title: Better-Auth Kit\n- Context7-compatible library ID: /ping-maxwell/better-auth-kit\n- Description: A collection of plugins, tools, libraries, examples, and more for Better-Auth. 🚀\n- Code Snippets: 145\n- Trust Score: 7.4\n----------\n- Title: Better Auth Tauri\n- Context7-compatible library ID: /daveyplate/better-auth-tauri\n- Description: A Tauri plugin for Better Auth that simplifies authentication integration in desktop applications by handling deep links and managing authentication state.\n- Code Snippets: 6\n- Trust Score: 6\n----------\n- Title: Surreal Better Auth\n- Context7-compatible library ID: /oskar-gmerek/surreal-better-auth\n- Description: SurrealDB Adapter for Better Auth. Use your favorite database as a Better-Auth storage.\n- Code Snippets: 2\n- Trust Score: 7.7\n----------\n- Title: Nuxthub Better Auth\n- Context7-compatible library ID: /atinux/nuxthub-better-auth\n- Description: A demo showcasing BetterAuth integration with NuxtHub, featuring server-side rendering on Cloudflare Workers, edge database, and easy authentication with the useAuth() composable.\n- Code Snippets: 4\n- Trust Score: 10\n----------\n- Title: RivetKit Better Auth\n- Context7-compatible library ID: /joshua1/rivetkit-svelte\n- Description: An adapter for integrating Better Auth with RivetKit actors, providing seamless authentication and LINQ-style querying capabilities for data operations.\n- Code Snippets: 14\n- Trust Score: 6.2\n----------\n- Title: Better Auth Username\n- Context7-compatible library ID: /websites/raw_githubusercontent_better-auth_better-auth_refs_heads_main_content\n- Description: The Username plugin for Better Auth adds username support to the email and password authenticator, allowing users to sign in and sign up with a username instead of an email.\n- Code Snippets: 15\n- Trust Score: 7.5\n----------\n- Title: Better Auth TanStack\n- Context7-compatible library ID: /daveyplate/better-auth-tanstack\n- Description: Tanstack Query hooks for Better Auth, offering enhanced control over request timing, optimistic mutations, and offline caching for authentication.\n- Code Snippets: 21\n- Trust Score: 6\n----------\n- Title: Convex Better Auth\n- Context7-compatible library ID: /erquhart/convex-better-auth\n- Description: \n- Code Snippets: 15\n- Trust Score: 8.9\n----------\n- Title: RivetKit Better Auth\n- Context7-compatible library ID: /joshua1/rivetkit-better-auth\n- Description: A RivetKit adapter for Better Auth that provides seamless authentication integration with RivetKit actors using in-memory state management.\n- Code Snippets: 27\n- Trust Score: 6.2\n----------\n- Title: SurrealDB Better Auth\n- Context7-compatible library ID: /necmttn/surrealdb-better-auth\n- Description: A SurrealDB adapter for Better Auth, providing a robust authentication solution with SurrealDB's flexible database capabilities, featuring secure authentication, real-time data synchronization, and easy configuration.\n- Code Snippets: 10\n- Trust Score: 9.2\n----------\n- Title: NestJS Better Auth\n- Context7-compatible library ID: /thallesp/nestjs-better-auth\n- Description: Easily add authentication to your project\n- Code Snippets: 14\n- Trust Score: 8.7\n----------\n- Title: Convex + Better Auth\n- Context7-compatible library ID: /websites/convex-better-auth_netlify_app\n- Description: A Convex Component providing a typesafe, secure, and comprehensive integration layer for using Better Auth with Convex applications.\n- Code Snippets: 69\n- Trust Score: 7.5\n----------\n- Title: Überauth\n- Context7-compatible library ID: /websites/hexdocs_pm_ueberauth\n- Description: Überauth is an Elixir authentication system and a two-phase framework for Plug-based web applications, heavily inspired by Omniauth, providing a clear API for various authentication strategies.\n- Code Snippets: 45\n- Trust Score: 7.5\n----------\n- Title: GoAuth\n- Context7-compatible library ID: /websites/goauth_gitbook_io_goauth-documentation\n- Description: GoAuth is a private authorization service that simplifies adding social login (Google, Yandex, VK ID, Telegram) to applications, providing a unified user data response and handling OAuth complexities.\n- Code Snippets: 6\n- Trust Score: 7.5\n----------\n- Title: Better Streaming Assets\n- Context7-compatible library ID: /gwiazdorrr/betterstreamingassets\n- Description: A Unity plugin providing uniform, thread-safe, and efficient access to Streaming Assets, primarily benefiting Android projects by offering an alternative to inefficient WWW or Asset Bundles.\n- Code Snippets: 6\n- Trust Score: 7.7"
                }
              ]
            },
            "toolu_01RiPGp2JM9jm67osWWGq3YP__vscode-1760375232507": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "================\nCODE SNIPPETS\n================\n### Import Better Auth Module in NestJS Root Module\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nIntegrate Better Auth into your NestJS application by importing the `AuthModule` into your root module, typically `AppModule`. Use `AuthModule.forRoot()` to initialize it with your Better Auth instance, making authentication services available throughout your application.\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { AuthModule } from '@thallesp/nestjs-better-auth';\nimport { auth } from \"./auth\"; // Your Better Auth instance\n\n@Module({\n  imports: [\n    AuthModule.forRoot({ auth }),\n  ],\n})\nexport class AppModule {}\n```\n\n--------------------------------\n\n### Disable NestJS Body Parser for Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nConfigure the NestJS application to disable its built-in body parser. This is a critical step that allows Better Auth to correctly process the raw request body, ensuring proper functionality and avoiding conflicts.\n\n```ts\nimport { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, {\n    bodyParser: false, // Required for Better Auth\n  });\n  await app.listen(process.env.PORT ?? 3000);\n}\nbootstrap();\n```\n\n--------------------------------\n\n### Install and Configure Bearer Plugin for better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet demonstrates how to integrate the Bearer plugin into your `better-auth` authentication setup. It imports `betterAuth` and the `bearer` plugin, then configures the `auth` instance to use the plugin, enabling Bearer token support.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { bearer } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [bearer()]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth with Admin Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/admin.mdx\n\nThis snippet demonstrates how to integrate the Admin plugin into your `better-auth` configuration. It involves importing the `admin` plugin and adding it to the `plugins` array of the `betterAuth` initialization. This setup enables administrative functionalities within your authentication system.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { admin } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        admin()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Social Providers (GitHub) in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/clerk-migration-guide.mdx\n\nThis TypeScript configuration snippet adds social authentication providers to Better Auth, specifically demonstrating GitHub integration. It requires `clientId` and `clientSecret` environment variables for secure setup.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { \n        enabled: true,\n    },\n    socialProviders: { // [!code highlight]\n        github: { // [!code highlight]\n            clientId: process.env.GITHUB_CLIENT_ID, // [!code highlight]\n            clientSecret: process.env.GITHUB_CLIENT_SECRET, // [!code highlight]\n        } // [!code highlight]\n    } // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Configure Zoom Authentication Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/zoom.mdx\n\nThis snippet demonstrates how to integrate Zoom as a social authentication provider within the better-auth library. It requires importing `betterAuth` and passing Zoom's `clientId` and `clientSecret` from environment variables to the `socialProviders` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n  socialProviders: {\n    zoom: { // [!code highlight]\n      clientId: process.env.ZOOM_CLIENT_ID as string, // [!code highlight]\n      clientSecret: process.env.ZOOM_CLIENT_SECRET as string, // [!code highlight]\n    }, // [!code highlight]\n  },\n})\n```\n\n--------------------------------\n\n### Protect NestJS Routes and Access Session with Better Auth Decorators\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nDemonstrates how to use `@Session`, `@AllowAnonymous`, and `@OptionalAuth` decorators within NestJS controllers to manage route protection and access user session information. This example covers protected routes, publicly accessible routes, and routes where authentication is optional, showcasing flexible access control.\n\n```ts\nimport { Controller, Get } from '@nestjs/common';\nimport { Session, UserSession, AllowAnonymous, OptionalAuth } from '@thallesp/nestjs-better-auth';\n\n@Controller('users')\nexport class UserController {\n  @Get('me')\n  async getProfile(@Session() session: UserSession) {\n    return { user: session.user };\n  }\n\n  @Get('public')\n  @AllowAnonymous() // Allow anonymous access\n  async getPublic() {\n    return { message: 'Public route' };\n  }\n\n  @Get('optional')\n  @OptionalAuth() // Authentication is optional\n  async getOptional(@Session() session: UserSession) {\n    return { authenticated: !!session };\n  }\n}\n```\n\n--------------------------------\n\n### Install NestJS Better Auth Library\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nestjs.mdx\n\nInstall the `@thallesp/nestjs-better-auth` package using npm or yarn to integrate Better Auth functionalities into your NestJS project. This package provides the necessary modules and decorators.\n\n```shell\nnpm install @thallesp/nestjs-better-auth\n# or\nyarn add @thallesp/nestjs-better-auth\n```\n\n--------------------------------\n\n### Configure Cognito Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/cognito.mdx\n\nThis TypeScript code snippet illustrates how to integrate Amazon Cognito as a social provider into the `better-auth` instance. It requires configuration parameters such as `clientId`, `clientSecret`, `domain`, `region`, and `userPoolId`, which are typically sourced from environment variables for secure setup.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    cognito: {\n      clientId: process.env.COGNITO_CLIENT_ID as string,\n      clientSecret: process.env.COGNITO_CLIENT_SECRET as string,\n      domain: process.env.COGNITO_DOMAIN as string,\n      region: process.env.COGNITO_REGION as string,\n      userPoolId: process.env.COGNITO_USERPOOL_ID as string,\n    },\n  },\n})\n```\n\n--------------------------------\n\n### Register Custom Auth Middleware in Waku Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis configuration snippet shows how to integrate the custom authentication middleware (`./src/middleware/auth.ts`) into the Waku framework. By adding the middleware's path to the `middleware` array in `waku.config.ts`, it ensures that the session handling logic is executed for incoming requests.\n\n```ts\nimport { defineConfig } from \"waku/config\";\n\nexport default defineConfig({\n  middleware: [\n    \"waku/middleware/context\",\n    \"waku/middleware/dev-server\",\n    \"./src/middleware/auth.ts\",\n    \"waku/middleware/handler\",\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Authentication Methods (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis TypeScript snippet demonstrates how to enable built-in email/password authentication and configure social sign-on providers like GitHub for Better Auth. It shows how to pass configuration objects for 'emailAndPassword' and 'socialProviders' with client IDs and secrets.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  //...other options // [!code highlight]\n  emailAndPassword: { // [!code highlight]\n    enabled: true, // [!code highlight]\n  }, // [!code highlight]\n  socialProviders: { // [!code highlight]\n    github: { // [!code highlight]\n      clientId: process.env.GITHUB_CLIENT_ID as string, // [!code highlight]\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string, // [!code highlight]\n    }, // [!code highlight]\n  }, // [!code highlight]\n});\n```\n\n--------------------------------\n\n### Configure Dub Analytics Plugin in `better-auth` (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/dub.mdx\n\nThis TypeScript code snippet demonstrates how to configure the `dubAnalytics` plugin within your `better-auth` setup. It imports `betterAuth` and `dubAnalytics`, then initializes `dubAnalytics` with a `Dub` client instance, adding it to the `betterAuth` plugins array. This configuration enables Dub integration for your authentication system.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { dubAnalytics } from \"@dub/better-auth\"\nimport { dub } from \"dub\"\n\nexport const auth = betterAuth({\n    plugins: [\n        dubAnalytics({\n            dubClient: new Dub()\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure LINE Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/line.mdx\n\nThis code snippet demonstrates how to integrate LINE as a social authentication provider within the `better-auth` configuration. It requires setting `clientId` and `clientSecret` obtained from the LINE Developers Console, typically loaded from environment variables. Optional `redirectURI` and `scopes` can also be specified.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    line: {\n      clientId: process.env.LINE_CLIENT_ID as string,\n      clientSecret: process.env.LINE_CLIENT_SECRET as string,\n      // Optional: override redirect if needed\n      // redirectURI: \"https://your.app/api/auth/callback/line\",\n      // scopes are prefilled: [\"openid\",\"profile\",\"email\"]. Append if needed\n    }\n  }\n});\n```\n\n--------------------------------\n\n### Configure Atlassian Social Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/atlassian.mdx\n\nThis code snippet demonstrates how to integrate Atlassian as a social authentication provider within the `better-auth` instance. It requires importing `betterAuth` and passing Atlassian's `clientId` and `clientSecret` from environment variables to the `socialProviders` configuration. Ensure these environment variables are correctly set for production.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        atlassian: {\n            clientId: process.env.ATLASSIAN_CLIENT_ID as string,\n            clientSecret: process.env.ATLASSIAN_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure Social Login Providers in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet shows how to integrate social login providers like Google and GitHub into the Better Auth configuration. Each provider requires a `clientId`, `clientSecret`, and a `redirectUri` to enable external authentication functionality.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tsocialProviders: {\n\t\tgoogle: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/google\"\n\t\t},\n\t\tgithub: {\n\t\t\tclientId: \"your-client-id\",\n\t\t\tclientSecret: \"your-client-secret\",\n\t\t\tredirectUri: \"https://example.com/api/auth/callback/github\"\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Integrate Better Auth with SvelteKit Hooks\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nConfigures SvelteKit's `hooks.server.ts` to handle Better Auth. The `handle` function uses `svelteKitHandler` to process authentication requests, integrating with SvelteKit's request lifecycle.\n\n```typescript\nimport { auth } from \"$lib/auth\"; // path to your auth file\nimport { svelteKitHandler } from \"better-auth/svelte-kit\";\nimport { building } from '$app/environment'\n\nexport async function handle({ event, resolve }) {\n    return svelteKitHandler({ event, resolve, auth, building });\n}\n```\n\n--------------------------------\n\n### Configure Better Auth with OpenAPI Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/open-api.mdx\n\nThis TypeScript snippet demonstrates how to integrate the `openAPI` plugin into your `betterAuth` configuration. By adding `openAPI()` to the `plugins` array, you enable the Open API reference functionality for your Better Auth instance. This setup ensures that your authentication endpoints are documented and discoverable.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { openAPI } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ \n        openAPI(), \n    ] \n})\n```\n\n--------------------------------\n\n### Configure Notion Social Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/notion.mdx\n\nThis snippet demonstrates how to configure Notion as a social provider within the `better-auth` framework. It requires passing `clientId` and `clientSecret`, typically loaded from environment variables, to the `socialProviders.notion` object in your authentication configuration. This setup allows your application to use Notion for user authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        notion: {\n            clientId: process.env.NOTION_CLIENT_ID as string,\n            clientSecret: process.env.NOTION_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure Better Auth Handler with Elysia Framework\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis Elysia.js snippet defines a `betterAuthView` middleware that validates request methods (`GET`, `POST`) and forwards them to the `auth.handler`. It then mounts this middleware to `/api/auth/*` and starts the Elysia server, providing authentication integration for Elysia applications.\n\n```typescript\nimport { Elysia, Context } from \"elysia\";\nimport { auth } from \"./auth\";\n\nconst betterAuthView = (context: Context) => {\n    const BETTER_AUTH_ACCEPT_METHODS = [\"POST\", \"GET\"]\n    // validate request method\n    if(BETTER_AUTH_ACCEPT_METHODS.includes(context.request.method)) {\n        return auth.handler(context.request);\n    } else {\n        context.error(405)\n    }\n}\n\nconst app = new Elysia().all(\"/api/auth/*\", betterAuthView).listen(3000);\n\nconsole.log(\n`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`\n);\n```\n\n--------------------------------\n\n### Configure GitHub Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/github.mdx\n\nThis snippet demonstrates how to integrate GitHub as a social authentication provider within the `better-auth` instance. It requires a `clientId` and `clientSecret`, typically loaded from environment variables, to be passed to the `socialProviders.github` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID as string,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Configure better-auth with JWT plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/jwt.mdx\n\nThis snippet demonstrates how to add the JWT plugin to your `better-auth` configuration file (`auth.ts`). It imports `betterAuth` and the `jwt` plugin, then includes the `jwt()` call within the `plugins` array of the `betterAuth` initialization. This enables JWT token functionality in your authentication setup.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { jwt } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [ // [!code highlight]\n        jwt(), // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Configure SIWE Client Plugin in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis snippet demonstrates how to initialize the SIWE client plugin within the `better-auth` client. It shows the basic structure for integrating SIWE functionality on the client-side, with an optional configuration block for future extensions.\n\n```typescript\nimport { createAuthClient } from \"better-auth/client\";\nimport { siweClient } from \"better-auth/client/plugins\";\n\nexport const authClient = createAuthClient({\n  plugins: [\n    siweClient({\n      // Optional client configuration can go here\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Hono Client to Send Credentials (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/hono.mdx\n\nThis TypeScript code demonstrates how to initialize the Hono client (`hc`) with the `credentials: \"include\"` option. This setting is crucial for ensuring that authentication cookies are sent along with cross-origin requests, which is necessary when the client and server are hosted on different domains or ports, enabling proper authentication with Better Auth protected endpoints.\n\n```typescript\nimport { hc } from \"hono/client\";\nimport type { AppType } from \"./server\"; // Your Hono app type\n\nconst client = hc<AppType>(\"http://localhost:8787/\", {\n  init: {\n    credentials: \"include\", // Required for sending cookies cross-origin\n  },\n});\n\n// Now your client requests will include credentials\nconst response = await client.someProtectedEndpoint.$get();\n```\n\n--------------------------------\n\n### Configure Server-side Better Auth with Plugins (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/concepts/plugins.mdx\n\nThis TypeScript snippet demonstrates how to initialize Better Auth on the server by including plugins within the `plugins` array of the configuration object. It imports `betterAuth` from `better-auth` and sets up the server-side authentication instance.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    plugins: [\n        // Add your plugins here\n    ]\n});\n```\n\n--------------------------------\n\n### Implement SIWE Authentication with better-auth in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis comprehensive example illustrates how to set up the SIWE server plugin for `better-auth`, including custom implementations for nonce generation, message verification using `viem`, and optional ENS lookup. It configures the plugin with domain, email domain, anonymous sign-in settings, and integrates with a database.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { siwe } from \"better-auth/plugins\";\nimport { generateRandomString } from \"better-auth/crypto\";\nimport { verifyMessage, createPublicClient, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nexport const auth = betterAuth({\n  database: {\n    // your database configuration\n  },\n  plugins: [\n    siwe({\n      domain: \"myapp.com\",\n      emailDomainName: \"myapp.com\",\n      anonymous: false,\n      getNonce: async () => {\n        // Generate a cryptographically secure random nonce\n        return generateRandomString(32);\n      },\n      verifyMessage: async ({ message, signature, address }) => {\n        try {\n          // Verify the signature using viem (recommended)\n          const isValid = await verifyMessage({\n            address: address as `0x${string}`,\n            message,\n            signature: signature as `0x${string}`,\n          });\n          return isValid;\n        } catch (error) {\n          console.error(\"SIWE verification failed:\", error);\n          return false;\n        }\n      },\n      ensLookup: async ({ walletAddress }) => {\n        try {\n          // Optional: lookup ENS name and avatar using viem\n          // You can use viem's ENS utilities here\n          const client = createPublicClient({\n            chain: mainnet,\n            transport: http(),\n          });\n\n          const ensName = await client.getEnsName({\n            address: walletAddress as `0x${string}`,\n          });\n\n          const ensAvatar = ensName\n            ? await client.getEnsAvatar({\n                name: ensName,\n              })\n            : null;\n\n          return {\n            name: ensName || walletAddress,\n            avatar: ensAvatar || \"\",\n          };\n        } catch {\n          return {\n            name: walletAddress,\n            avatar: \"\",\n          };\n        }\n      },\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth as Convex authentication provider\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/convex.mdx\n\nAdds a `convex/auth.config.ts` file to define Better Auth as an authentication provider for your Convex application. It uses the `CONVEX_SITE_URL` environment variable for the domain and `convex` as the application ID.\n\n```typescript\nexport default {\n    providers: [\n        {\n            domain: process.env.CONVEX_SITE_URL,\n            applicationID: \"convex\",\n        },\n    ],\n};\n```\n\n--------------------------------\n\n### Configure Better Auth instance with Prisma adapter\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nitro.mdx\n\nCreate a Better Auth instance in `server/utils/auth.ts`, integrating it with Prisma using the `prismaAdapter`. This configuration enables email and password authentication and sets up the database connection.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, { provider: \"sqlite\" }),\n  emailAndPassword: { enabled: true },\n});\n```\n\n--------------------------------\n\n### Configure Slack Social Provider in better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/slack.mdx\n\nThis snippet demonstrates how to configure the Slack social provider within the better-auth library. It requires `clientId` and `clientSecret` obtained from a Slack app, typically loaded from environment variables, to enable Slack authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        slack: { \n            clientId: process.env.SLACK_CLIENT_ID as string, \n            clientSecret: process.env.SLACK_CLIENT_SECRET as string, \n        }, \n    },\n})\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins for Deep Linking (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nUpdates the Better Auth server configuration to include the app's custom URL scheme ('myapp://') in the 'trustedOrigins' list. This step is critical for enabling secure deep linking and redirects after authentication flows.\n\n```typescript\nexport const auth = betterAuth({\n    trustedOrigins: [\"myapp://\"]\n})\n```\n\n--------------------------------\n\n### Integrate Plugins with Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet illustrates how to add plugins to the Better Auth configuration. It specifically demonstrates the integration of the `emailOTP` plugin, which requires a custom function to handle sending one-time passwords for user verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { emailOTP } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n\tplugins: [\n\t\temailOTP({\n\t\t\tsendVerificationOTP: async ({ email, otp, type }) => {\n\t\t\t\t// Send OTP to user's email\n\t\t\t}\n\t\t})\n\t],\n})\n```\n\n--------------------------------\n\n### Configure a Default SAML SSO Provider (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/sso.mdx\n\nThis code snippet demonstrates how to configure a default SAML SSO provider using the `sso` plugin for `betterAuth`. The `defaultSSO` configuration allows for testing SAML authentication without requiring database setup and serves as a fallback when no matching provider is found, supporting all standard SAML configuration options.\n\n```ts\nconst auth = betterAuth({\n    plugins: [\n        sso({\n            defaultSSO: {\n                providerId: \"default-saml\", // Provider ID for the default provider\n                samlConfig: {\n                    issuer: \"https://your-app.com\",\n                    entryPoint: \"https://idp.example.com/sso\",\n                    cert: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\",\n                    callbackUrl: \"http://localhost:3000/api/auth/sso/saml2/sp/acs\",\n                    spMetadata: {\n                        entityID: \"http://localhost:3000/api/auth/sso/saml2/sp/metadata\",\n                        metadata: \"<!-- Your SP Metadata XML -->\",\n                    }\n                }\n            }\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in SolidStart\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nIntegrates Better Auth into SolidStart by exporting `GET` and `POST` methods for the `/routes/api/auth/*all.ts` route. It uses `toSolidStartHandler` to wrap the auth instance for request handling.\n\n```typescript\nimport { auth } from \"~/lib/auth\"; // path to your auth file\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n--------------------------------\n\n### Configure Spotify Provider with better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/spotify.mdx\n\nTo configure Spotify as a social provider, import `betterAuth` and pass Spotify client credentials to the `socialProviders` option. This setup uses environment variables for `clientId` and `clientSecret`.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n   \n    socialProviders: {\n        spotify: {\n            clientId: process.env.SPOTIFY_CLIENT_ID as string,\n            clientSecret: process.env.SPOTIFY_CLIENT_SECRET as string,\n        },\n    },\n})\n```\n\n--------------------------------\n\n### Add Expo Plugin to Better Auth Server Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis TypeScript snippet demonstrates how to configure the Better Auth server to use the Expo plugin. It imports 'betterAuth' and 'expo' from their respective packages and registers the 'expo()' plugin within the 'plugins' array of the 'betterAuth' instance, also enabling email and password authentication.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\";\n\nexport const auth = betterAuth({\n    plugins: [expo()],\n    emailAndPassword: { \n        enabled: true, \n      }, \n});\n```\n\n--------------------------------\n\n### Configure Better Auth for Email and Password Authentication (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis snippet demonstrates how to enable email and password authentication in your Better Auth configuration by setting the `emailAndPassword.enabled` property to `true`.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    emailAndPassword: {\n        enabled: true\n    }\n})\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in Nuxt\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/nuxt.mdx\n\nThis TypeScript snippet defines an API route handler in Nuxt for Better Auth. It imports the authentication configuration and processes incoming web requests through the `auth.handler`.\n\n```ts\nimport { auth } from \"~/lib/auth\"; // import your auth config\n\nexport default defineEventHandler((event) => {\n\treturn auth.handler(toWebRequest(event));\n});\n```\n\n--------------------------------\n\n### Configure Custom Cookie Name/Prefix for getSessionCookie (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis snippet illustrates how to pass custom options, such as `cookieName` and `cookiePrefix`, to the `getSessionCookie` function. This is necessary when the authentication configuration in `auth.ts` uses non-default cookie settings, ensuring that the middleware correctly identifies the session cookie.\n\n```ts\nconst sessionCookie = getSessionCookie(request, {\n    cookieName: \"my_session_cookie\",\n    cookiePrefix: \"my_prefix\"\n})\n```\n\n--------------------------------\n\n### Configure Better Auth OIDC Provider for JWKS Endpoint with JWT Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/oidc-provider.mdx\n\nThis TypeScript configuration demonstrates integrating the `oidcProvider` plugin with the `jwt` plugin in Better Auth to enable asymmetric key signing for ID tokens and expose a JWKS endpoint. It also disables the default `/token` endpoint for OIDC compliance, directing OAuth traffic to `/oauth2/token`. This setup requires the `better-auth` and `better-auth/plugins` packages.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { oidcProvider } from \"better-auth/plugins\";\nimport { jwt } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    disabledPaths: [\n        \"/token\",\n    ],\n    plugins: [\n        jwt(), // Make sure to add the JWT plugin\n        oidcProvider({\n            useJWTPlugin: true, // Enable JWT plugin integration\n            loginPage: \"/sign-in\",\n            // ... other options\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Better Auth with TanStack Start Cookie Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/tanstack.mdx\n\nThis snippet demonstrates how to configure Better Auth (`betterAuth`) by adding the `reactStartCookies` plugin. This plugin automatically handles cookie setting for TanStack Start, ensuring authentication functions like `signInEmail` or `signUpEmail` correctly manage cookies within the TanStack Start environment. It's crucial to place this plugin last in the `plugins` array.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { reactStartCookies } from \"better-auth/react-start\";\n\nexport const auth = betterAuth({\n    //...your config\n    plugins: [reactStartCookies()] // make sure this is the last plugin in the array\n})\n```\n\n--------------------------------\n\n### Initializes Better Auth backend instance for Remix (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/remix.mdx\n\nThis snippet sets up the Better Auth server-side instance in `auth.server.ts` within a Remix project. It configures the database provider and URL using environment variables. The instance must be exported as `auth` or as a default export for proper integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    database: {\n        provider: \"postgres\", //change this to your database provider\n        url: process.env.DATABASE_URL, // path to your database or connection string\n    }\n})\n```\n\n--------------------------------\n\n### Configure Two-Factor Authentication Plugin in Better Auth Server\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis TypeScript snippet demonstrates how to integrate the two-factor authentication plugin into your Better Auth server instance. By importing `twoFactor` from `better-auth/plugins` and including it in the `plugins` array during the `betterAuth` initialization, you enable 2FA-related routes and methods on your server.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { twoFactor } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    //...rest of the options\n    plugins: [ // [!code highlight]\n        twoFactor() // [!code highlight]\n    ] // [!code highlight]\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth Client for Lynx (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/lynx.mdx\n\nImports `createAuthClient` from `better-auth/lynx` to set up the authentication client. The `baseURL` property specifies the endpoint of your Better Auth server, enabling communication for authentication operations.\n\n```typescript\nimport { createAuthClient } from \"better-auth/lynx\"\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:3000\" // The base URL of your auth server\n})\n```\n\n--------------------------------\n\n### Configure Basic Salesforce Provider with Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/salesforce.mdx\n\nThis snippet demonstrates how to configure the Salesforce social provider within Better Auth, setting the client ID, client secret, and environment. It uses environment variables for sensitive credentials and highlights the minimal required configuration for integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        salesforce: { // [!code highlight]\n            clientId: process.env.SALESFORCE_CLIENT_ID as string, // [!code highlight]\n            clientSecret: process.env.SALESFORCE_CLIENT_SECRET as string, // [!code highlight]\n            environment: \"production\", // or \"sandbox\" // [!code highlight]\n        }, // [!code highlight]\n    },\n})\n```\n\n--------------------------------\n\n### Integrate Autumn Plugin with Better Auth Configuration\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/autumn.mdx\n\nAdds the Autumn plugin to your Better Auth configuration, enabling it to manage user or organization-scoped billing. This setup routes authentication events and customer data through Autumn, supporting various identification strategies for billing.\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [autumn()],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [organization(), autumn({ customerScope: \"organization\" })],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [\n    organization(),\n    autumn({ customerScope: \"user_and_organization\" })\n  ],\n});\n```\n\n```typescript\nimport { autumn } from \"autumn-js/better-auth\";\nimport { organization } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  // ...\n  plugins: [\n    organization(),\n    autumn({\n          identify: async ({ session, organization }) => {\n            return {\n              customerId: \"your_customer_id\",\n              customerData: {\n                name: \"Customer Name\",\n                email: \"customer@gmail.com\",\n              },\n            };\n          },\n        }),\n      ],\n    });\n```\n\n--------------------------------\n\n### Configure Hugging Face Social Provider (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/huggingface.mdx\n\nThis code snippet demonstrates how to configure Hugging Face as a social authentication provider within the `better-auth` library. It involves importing `betterAuth` and setting the `clientId` and `clientSecret` using environment variables. These credentials are required for the OAuth flow and should be obtained from your Hugging Face OAuth application settings.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        huggingface: {\n            clientId: process.env.HUGGINGFACE_CLIENT_ID as string,\n            clientSecret: process.env.HUGGINGFACE_CLIENT_SECRET as string,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure better-auth Server with Phone Number Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/phone-number.mdx\n\nIntegrates the better-auth phone number plugin into the server-side authentication setup. It requires implementing the `sendOTP` function to handle sending one-time passwords for verification via SMS or other methods.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { phoneNumber } from \"better-auth/plugins\"\n\nconst auth = betterAuth({\n    plugins: [ \n        phoneNumber({\n            sendOTP: ({ phoneNumber, code }, request) => {\n                // Implement sending OTP code via SMS\n            }\n        })\n    ] \n})\n```\n\n--------------------------------\n\n### Configure Main Better Auth Instance with PostgreSQL Pool\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/blogs/0-supabase-auth-to-planetscale-migration.mdx\n\nThis TypeScript snippet demonstrates the primary configuration for `betterAuth`, integrating it with a PostgreSQL database using `pg.Pool`. It defines the base URL for authentication endpoints and enables email and password-based sign-in methods, utilizing `DATABASE_URL` from environment variables for connection.\n\n```ts\nimport { Pool } from \"pg\";\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  baseURL: \"http://localhost:3000\",\n  database: new Pool({\n    connectionString: process.env.DATABASE_URL,\n  }),\n  emailAndPassword: {\n    enabled: true,\n  },\n});\n```\n\n--------------------------------\n\n### Configure Anonymous Plugin in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/anonymous.mdx\n\nThis code snippet demonstrates how to add the `anonymous` plugin to your `betterAuth` configuration in TypeScript. It imports the plugin and includes it in the `plugins` array to enable anonymous authentication on the server-side.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { anonymous } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        anonymous() // [!code highlight]\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Better Auth API Route in Next.js\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nIntegrates Better Auth into a Next.js API route. It uses `toNextJsHandler` to create `POST` and `GET` exports for the `api/auth/[...all]` route, handling all authentication requests.\n\n```typescript\nimport { auth } from \"@/lib/auth\"; // path to your auth file\nimport { toNextJsHandler } from \"better-auth/next-js\";\n\nexport const { POST, GET } = toNextJsHandler(auth);\n```\n\n--------------------------------\n\n### Configure Email and Password Authentication in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nThis snippet demonstrates how to enable and configure email and password authentication within the Better Auth library. It includes settings for sign-up, email verification, password policies (minimum/maximum length), automatic sign-in, and custom functions for sending reset password emails and handling password hashing/verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\temailAndPassword: {\n\t\tenabled: true,\n\t\tdisableSignUp: false,\n\t\trequireEmailVerification: true,\n\t\tminPasswordLength: 8,\n\t\tmaxPasswordLength: 128,\n\t\tautoSignIn: true,\n\t\tsendResetPassword: async ({ user, url, token }) => {\n\t\t\t// Send reset password email\n\t\t},\n\t\tresetPasswordTokenExpiresIn: 3600, // 1 hour\n\t\tpassword: {\n\t\t\thash: async (password) => {\n\t\t\t\t// Custom password hashing\n\t\t\t\treturn hashedPassword;\n\t\t\t},\n\t\t\tverify: async ({ hash, password }) => {\n\t\t\t\t// Custom password verification\n\t\t\t\treturn isValid;\n\t\t\t}\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Configure Better Auth SIWE Server Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/siwe.mdx\n\nThis code configures the server-side Sign In with Ethereum (SIWE) plugin for Better Auth. It imports `betterAuth` and the `siwe` plugin, setting up `domain`, optional `emailDomainName`, `anonymous` flag, and custom logic for `getNonce`, `verifyMessage`, and optional `ensLookup`.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { siwe } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        siwe({\n            domain: \"example.com\",\n            emailDomainName: \"example.com\", // optional\n            anonymous: false, // optional, default is true\n            getNonce: async () => {\n                // Implement your nonce generation logic here\n                return \"your-secure-random-nonce\";\n            },\n            verifyMessage: async (args) => {\n                // Implement your SIWE message verification logic here\n                // This should verify the signature against the message\n                return true; // return true if signature is valid\n            },\n            ensLookup: async (args) => {\n                // Optional: Implement ENS lookup for user names and avatars\n                return {\n                    name: \"user.eth\",\n                    avatar: \"https://example.com/avatar.png\"\n                };\n            }\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure BetterAuth server with username plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/username.mdx\n\nThis TypeScript snippet demonstrates how to integrate the `username` plugin into the BetterAuth server configuration. It imports `betterAuth` and `username` from their respective packages and adds the `username()` plugin to the `plugins` array during `betterAuth` initialization. This enables username-based authentication on the server-side.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { username } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    plugins: [\n        username()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Auth Client to Use Stored Bearer Token\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet shows how to configure the `createAuthClient` to automatically include the Bearer token in all outgoing requests. It uses a dynamic function to retrieve the token from `localStorage`, ensuring the latest token is always used for authentication.\n\n```ts\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        auth: {\n           type:\"Bearer\",\n           token: () => localStorage.getItem(\"bearer_token\") || \"\" // get the token from localStorage\n        }\n    }\n});\n```\n\n--------------------------------\n\n### Enable Email and Password Authentication in Better Auth Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/clerk-migration-guide.mdx\n\nThis TypeScript snippet modifies the Better Auth configuration to enable email and password authentication. It includes a placeholder for `sendVerificationEmail`, which needs custom implementation for email verification.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({ \n        connectionString: process.env.DATABASE_URL \n    }),\n    emailAndPassword: { // [!code highlight]\n        enabled: true, // [!code highlight]\n    }, // [!code highlight]\n    emailVerification: {\n      sendVerificationEmail: async({ user, url })=>{\n        // implement your logic here to send email verification\n      }\n\t},\n})\n```\n\n--------------------------------\n\n### Integrate Social Providers (Google, GitHub) with Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/auth0-migration-guide.mdx\n\nAdds social login capabilities to Better Auth by integrating providers like Google and GitHub. This configuration requires specifying `clientId` and `clientSecret` for each provider, typically sourced from environment variables. This enables users to authenticate using their existing social accounts.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    database: new Pool({\n        connectionString: process.env.DATABASE_URL\n    }),\n    emailAndPassword: {\n        enabled: true,\n    },\n    socialProviders: {\n        google: {\n            clientId: process.env.GOOGLE_CLIENT_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        },\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure Slack Provider for Specific Workspace\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/slack.mdx\n\nThis snippet demonstrates how to restrict Slack sign-in to a particular workspace by providing the `team` parameter in the `socialProviders.slack` configuration. The `team` value should be the Slack workspace ID to enforce workspace-specific authentication.\n\n```typescript\nsocialProviders: {\n    slack: {\n        clientId: process.env.SLACK_CLIENT_ID as string,\n        clientSecret: process.env.SLACK_CLIENT_SECRET as string,\n        team: \"T1234567890\", // Your Slack workspace ID\n    },\n}\n```\n\n--------------------------------\n\n### Configure Have I Been Pwned Plugin in TypeScript\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/have-i-been-pwned.mdx\n\nThis snippet demonstrates how to import and register the `haveIBeenPwned` plugin with `betterAuth` in a TypeScript configuration file. It shows the basic setup required to enable the password compromise checking functionality within your authentication system.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { haveIBeenPwned } from \"better-auth/plugins\" // [!code highlight]\n\nexport const auth = betterAuth({\n    plugins: [\n        haveIBeenPwned()\n    ]\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth Client with Expo Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nInitializes the Better Auth client in an Expo application, configuring it with a base URL and the 'expoClient' plugin. The plugin enables social authentication flows and secure cookie management by integrating with 'expo-secure-store' for session persistence.\n\n```typescript\nimport { createAuthClient } from \"better-auth/react\";\nimport { expoClient } from \"@better-auth/expo/client\";\nimport * as SecureStore from \"expo-secure-store\";\n\nexport const authClient = createAuthClient({\n    baseURL: \"http://localhost:8081\", \n    plugins: [\n        expoClient({\n            scheme: \"myapp\",\n            storagePrefix: \"myapp\",\n            storage: SecureStore,\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure JWT plugin for OAuth Provider Mode (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/jwt.mdx\n\nThis configuration snippet shows how to adjust the `betterAuth` setup for OAuth provider mode. It disables the `/token` endpoint and prevents the `set-auth-jwt` header from being set by configuring the `jwt` plugin with `disableSettingJwtHeader: true`. This ensures compliance with OAuth standards when using OIDC or MCP plugins.\n\n```typescript\nbetterAuth({\n  disabledPaths: [\n    \"/token\",\n  ],\n  plugins: [jwt({\n    disableSettingJwtHeader: true,\n  })]\n})\n```\n\n--------------------------------\n\n### Integrate Better Auth API Routes with Astro\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis Astro API route configuration handles `GET` and `POST` requests by passing them to the `auth.handler` function, which is imported from a local authentication module. It sets up the necessary endpoints for Better Auth within an Astro project.\n\n```typescript\nimport type { APIRoute } from \"astro\";\nimport { auth } from \"@/auth\"; // path to your auth file\n\nexport const GET: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n\nexport const POST: APIRoute = async (ctx) => {\n    return auth.handler(ctx.request);\n};\n```\n\n--------------------------------\n\n### Configure Password Reset and Post-Reset Logic in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/email-password.mdx\n\nThis TypeScript snippet configures the `betterAuth` instance with `sendResetPassword` and `onPasswordReset` functions for email and password authentication. The `sendResetPassword` function handles sending the password reset email, utilizing a custom `sendEmail` utility, while `onPasswordReset` defines logic to execute after a password has been successfully reset. This setup is crucial for enabling and managing the password reset flow.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { sendEmail } from \"./email\"; // your email sending function\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    sendResetPassword: async ({user, url, token}, request) => {\n      await sendEmail({\n        to: user.email,\n        subject: \"Reset your password\",\n        text: `Click the link to reset your password: ${url}`,\n      });\n    },\n    onPasswordReset: async ({ user }, request) => {\n      // your logic here\n      console.log(`Password for user ${user.email} has been reset.`);\n    },\n  },\n});\n```\n\n--------------------------------\n\n### Configure Server-side Better-Auth with Passkey Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/passkey.mdx\n\nThis TypeScript snippet demonstrates how to integrate the passkey plugin into your server-side `betterAuth` configuration. It covers importing the plugin and passing it to the `plugins` array, with options for `rpID`, `rpName`, `origin`, and `authenticatorSelection` for WebAuthn customization.\n\n```ts\nimport { betterAuth } from \"better-auth\"\nimport { passkey } from \"better-auth/plugins/passkey\"\n\nexport const auth = betterAuth({\n    plugins: [\n        passkey(),\n    ],\n})\n```\n\n--------------------------------\n\n### Initialize Better Auth instance with Convex client\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/convex.mdx\n\nCreates and initializes the Better Auth component in `convex/auth.ts`, integrating it with Convex. It sets up the base URL, configures the database adapter, enables email/password authentication (without verification), and includes the essential Convex plugin for compatibility.\n\n```typescript\nimport { createClient, type GenericCtx } from \"@convex-dev/better-auth\";\nimport { convex } from \"@convex-dev/better-auth/plugins\";\nimport { components } from \"./_generated/api\";\nimport { DataModel } from \"./_generated/dataModel\";\nimport { query } from \"./_generated/server\";\nimport { betterAuth } from \"better-auth\";\n\nconst siteUrl = process.env.SITE_URL!;\n\n// The component client has methods needed for integrating Convex with Better Auth,\n// as well as helper methods for general use.\nexport const authComponent = createClient<DataModel>(components.betterAuth);\n\nexport const createAuth = (\n    ctx: GenericCtx<DataModel>,\n        { optionsOnly } = { optionsOnly: false },\n    ) => {\n              return betterAuth({\n                // disable logging when createAuth is called just to generate options.\n                // this is not required, but there's a lot of noise in logs without it.\n                logger: {\n                    disabled: optionsOnly,\n                },\n                baseURL: siteUrl,\n                database: authComponent.adapter(ctx),\n                // Configure simple, non-verified email/password to get started\n                emailAndPassword: {\n                    enabled: true,\n                    requireEmailVerification: false,\n                },\n                plugins: [\n                    // The Convex plugin is required for Convex compatibility\n                    convex(),\n                ],\n            });\n        };\n```\n\n--------------------------------\n\n### Configure Client-Side BetterAuth with Two-Factor Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/2fa.mdx\n\nThis TypeScript snippet illustrates how to integrate the \"twoFactorClient\" plugin into your BetterAuth client configuration. This ensures the client-side application is equipped to handle 2FA flows, including redirection for verification.\n\n```typescript\nimport { createAuthClient } from \"better-auth/client\"\nimport { twoFactorClient } from \"better-auth/client/plugins\"\n\nexport const authClient = createAuthClient({\n    plugins: [\n        twoFactorClient()\n    ]\n})\n```\n\n--------------------------------\n\n### Configure BetterAuth Server with Polar Sub-Plugins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/polar.mdx\n\nInitialize the BetterAuth server instance by integrating the Polar plugin, which includes sub-plugins for checkout, customer portal, usage tracking, and secure webhook handling. This configuration connects your authentication service to Polar's payment and billing functionalities.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { polar, checkout, portal, usage, webhooks } from \"@polar-sh/better-auth\";\nimport { Polar } from \"@polar-sh/sdk\";\n\nconst polarClient = new Polar({\n    accessToken: process.env.POLAR_ACCESS_TOKEN,\n    // Use 'sandbox' if you're using the Polar Sandbox environment\n    // Remember that access tokens, products, etc. are completely separated between environments.\n    // Access tokens obtained in Production are for instance not usable in the Sandbox environment.\n    server: 'sandbox'\n});\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            client: polarClient,\n            createCustomerOnSignUp: true,\n            use: [\n                checkout({\n                    products: [\n                        {\n                            productId: \"123-456-789\", // ID of Product from Polar Dashboard\n                            slug: \"pro\" // Custom slug for easy reference in Checkout URL, e.g. /checkout/pro\n                        }\n                    ],\n                    successUrl: \"/success?checkout_id={CHECKOUT_ID}\",\n                    authenticatedUsersOnly: true\n                }),\n                portal(),\n                usage(),\n                webhooks({\n                    secret: process.env.POLAR_WEBHOOK_SECRET,\n                    onCustomerStateChanged: (payload) => // Triggered when anything regarding a customer changes\n                    onOrderPaid: (payload) => // Triggered when an order was paid (purchase, subscription renewal, etc.)\n                    ...  // Over 25 granular webhook handlers\n                    onPayload: (payload) => // Catch-all for all events\n                })\n            ],\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Better-Auth with Polar Checkout Plugin\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/polar.mdx\n\nThis snippet demonstrates how to integrate the Polar Checkout plugin into your Better-Auth configuration. It allows for defining products with slugs, setting a success URL for checkout completion, and controlling whether only authenticated users can initiate checkouts.\n\n```typescript\nimport { polar, checkout } from \"@polar-sh/better-auth\";\n\nconst auth = betterAuth({\n    // ... Better Auth config\n    plugins: [\n        polar({\n            ...\n            use: [\n                checkout({\n                    // Optional field - will make it possible to pass a slug to checkout instead of Product ID\n                    products: [ { productId: \"123-456-789\", slug: \"pro\" } ],\n                    // Relative URL to return to when checkout is successfully completed\n                    successUrl: \"/success?checkout_id={CHECKOUT_ID}\",\n                    // Wheather you want to allow unauthenticated checkout sessions or not\n                    authenticatedUsersOnly: true\n                })\n            ]\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure Social Providers in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/basic-usage.mdx\n\nThis code demonstrates how to enable and configure social authentication providers like GitHub within Better Auth. It requires setting `clientId` and `clientSecret` for each desired provider in the `socialProviders` object.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID!,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### TRPC Integration for Authenticated Requests with Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis snippet illustrates how to configure a TRPC client to automatically include the session cookie in all its requests. It achieves this by setting up an `httpBatchLink` that retrieves the cookie from `authClient.getCookie()` and injects it into the request headers.\n\n```tsx\n//...other imports\nimport { authClient } from \"@/lib/auth-client\";\n\nexport const api = createTRPCReact<AppRouter>();\n\nexport function TRPCProvider(props: { children: React.ReactNode }) {\n  const [queryClient] = useState(() => new QueryClient());\n  const [trpcClient] = useState(() =>\n    api.createClient({\n      links: [\n        httpBatchLink({\n          //...your other options\n          headers() {\n            const headers = new Map<string, string>();\n            const cookies = authClient.getCookie();\n            if (cookies) {\n              headers.set(\"Cookie\", cookies);\n            }\n            return Object.fromEntries(headers);\n          },\n        }),\n      ],\n    }),\n  );\n\n  return (\n    <api.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        {props.children}\n      </QueryClientProvider>\n    </api.Provider>\n  );\n}\n```\n\n--------------------------------\n\n### Initialize Better Auth Client for Web Frameworks (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/installation.mdx\n\nThis code demonstrates creating an authentication client instance using `createAuthClient` from the `better-auth` library. It shows implementations for Vanilla JS, React, Vue, Svelte, and Solid, all configured with an optional `baseURL`. The client facilitates interaction with the auth server.\n\n```ts\nimport { createAuthClient } from \"better-auth/client\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/react\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/vue\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/svelte\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n```ts\nimport { createAuthClient } from \"better-auth/solid\"\nexport const authClient = createAuthClient({\n    /** The base URL of the server (optional if you're using the same domain) */\n    baseURL: \"http://localhost:3000\"\n})\n```\n\n--------------------------------\n\n### Apple Client Configuration Parameters for better-auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/apple.mdx\n\nThis configuration snippet illustrates key parameters for setting up Apple authentication within the `better-auth` library. It includes environment variable usage for `clientSecret` and `appBundleIdentifier`, and specifies `trustedOrigins` to support Apple's authentication flows.\n\n```typescript\nclientSecret: process.env.APPLE_CLIENT_SECRET as string,\n                    // Optional\n                    appBundleIdentifier: process.env.APPLE_APP_BUNDLE_IDENTIFIER as string,\n                },\n            // Add appleid.apple.com to trustedOrigins for Sign In with Apple flows\n            trustedOrigins: [\"https://appleid.apple.com\"],\n```\n\n--------------------------------\n\n### Configure BetterAuth Advanced Settings (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nProvides advanced configuration options for `betterAuth`, covering IP address tracking, secure cookies, CSRF checks, cross-subdomain cookie sharing, custom cookie attributes, and database settings like ID generation and default limits. It allows fine-tuning security and data handling.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\tadvanced: {\n\t\tipAddress: {\n\t\t\tipAddressHeaders: [\"x-client-ip\", \"x-forwarded-for\"],\n\t\t\tdisableIpTracking: false\n\t\t},\n\t\tuseSecureCookies: true,\n\t\tdisableCSRFCheck: false,\n\t\tcrossSubDomainCookies: {\n\t\t\tenabled: true,\n\t\t\tadditionalCookies: [\"custom_cookie\"],\n\t\t\tdomain: \"example.com\"\n\t\t},\n\t\tcookies: {\n\t\t\tsession_token: {\n\t\t\t\tname: \"custom_session_token\",\n\t\t\t\tattributes: {\n\t\t\t\t\thttpOnly: true,\n\t\t\t\t\tsecure: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdefaultCookieAttributes: {\n\t\t\thttpOnly: true,\n\t\t\tsecure: true\n\t\t},\n\t\tcookiePrefix: \"myapp\",\n\t\tdatabase: {\n\t\t\t// If your DB is using auto-incrementing IDs, set this to true.\n\t\t\tuseNumberId: false,\n\t\t\t// Use your own custom ID generator, or disable generating IDs as a whole.\n\t\t\tgenerateId: (((options: {\n\t\t\t\tmodel: LiteralUnion<Models, string>;\n\t\t\t\tsize?: number;\n\t\t\t}) => {\n\t\t\t\treturn \"my-super-unique-id\";\n\t\t\t})) | false,\n\t\t\tdefaultFindManyLimit: 100\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Configure Better Auth with SSO Plugin (OIDC/SAML)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/blogs/1-3.mdx\n\nThis TypeScript code demonstrates how to integrate the SSO plugin with 'better-auth', enabling both OIDC and SAML 2.0 authentication. It configures client IDs, secrets, SAML entry points, certificates, and dynamically limits providers based on user plans.\n\n```ts\nimport { betterAuth } from \"better-auth\";\nimport { sso } from \"@better-auth/sso\";\n\nexport const auth = betterAuth({\n  plugins: [\n    sso({\n      oidc: {\n        clientId: process.env.OIDC_CLIENT_ID!,\n        clientSecret: process.env.OIDC_CLIENT_SECRET!,\n      },\n      saml: {\n        entryPoint: \"https://example.com/saml\",\n        issuer: \"better-auth-example\",\n        certificate: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\",\n      },\n      providersLimit: async (user) => {\n        const plan = await getUserPlan(user);\n        return plan.name === \"pro\" ? 10 : 1;\n      },\n    }),\n  ],\n});\n```\n\n--------------------------------\n\n### Configure Better Auth for Email and Password (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/email-password.mdx\n\nEnable email and password authentication by setting the `emailAndPassword.enabled` option to `true` in the Better Auth configuration. This is a foundational step to allow users to sign up and sign in using their email and password.\n\n```ts\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  emailAndPassword: { // [!code highlight]\n    enabled: true, // [!code highlight]\n  }, // [!code highlight]\n});\n```\n\n--------------------------------\n\n### Integrate Generic OAuth Plugin into Better Auth Configuration (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/other-social-providers.mdx\n\nThis snippet demonstrates how to add the `genericOAuth` plugin to your Better Auth server-side configuration. It shows how to define custom OAuth providers by specifying their `providerId`, `clientId`, `clientSecret`, and a `discoveryUrl` or other OAuth endpoints within the plugin's configuration array.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\nimport { genericOAuth } from \"better-auth/plugins\"\n\nexport const auth = betterAuth({\n    // ... other config options\n    plugins: [\n        genericOAuth({\n            config: [\n                {\n                    providerId: \"provider-id\",\n                    clientId: \"test-client-id\",\n                    clientSecret: \"test-client-secret\",\n                    discoveryUrl: \"https://auth.example.com/.well-known/openid-configuration\",\n                    // ... other config options\n                }\n                // Add more providers as needed\n            ]\n        })\n    ]\n})\n```\n\n--------------------------------\n\n### Configure Kakao Social Provider with better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/kakao.mdx\n\nThis TypeScript snippet demonstrates how to configure Kakao as a social authentication provider within the `better-auth` instance. It requires a client ID and client secret, typically loaded from environment variables (e.g., KAKAO_CLIENT_ID, KAKAO_CLIENT_SECRET), to be passed to the `kakao` provider object in the `socialProviders` configuration.\n\n```ts\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    socialProviders: {\n        kakao: {\n            clientId: process.env.KAKAO_CLIENT_ID as string,\n            clientSecret: process.env.KAKAO_CLIENT_SECRET as string,\n        },\n    }\n})\n```\n\n--------------------------------\n\n### Configure CORS for Better Auth with Express\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/express.mdx\n\nThis example shows how to configure Cross-Origin Resource Sharing (CORS) for an Express server integrating Better Auth using the `cors` middleware. It demonstrates setting allowed origins, HTTP methods, and enabling credentials.\n\n```typescript\nimport express from \"express\";\nimport cors from \"cors\"; // Import the CORS middleware\nimport { toNodeHandler, fromNodeHeaders } from \"better-auth/node\";\nimport { auth } from \"./auth\";\n\nconst app = express();\nconst port = 3005;\n\n// Configure CORS middleware\napp.use(\n  cors({\n    origin: \"http://your-frontend-domain.com\", // Replace with your frontend's origin\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], // Specify allowed HTTP methods\n    credentials: true, // Allow credentials (cookies, authorization headers, etc.)\n  })\n);\n```\n\n--------------------------------\n\n### Configure BetterAuth Account Settings (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/reference/options.mdx\n\nSets up the `account` options within `betterAuth` for managing user accounts. This includes specifying the model name, mapping user fields, enabling OAuth token encryption, and configuring account linking with trusted providers and email policies.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nexport const auth = betterAuth({\n\taccount: {\n\t\tmodelName: \"accounts\",\n\t\tfields: {\n\t\t\tuserId: \"user_id\"\n\t\t},\n\t\tencryptOAuthTokens: true, // Encrypt OAuth tokens before storing them in the database\n\t\taccountLinking: {\n\t\t\tenabled: true,\n\t\t\ttrustedProviders: [\"google\", \"github\", \"email-password\"],\n\t\t\tallowDifferentEmails: false\n\t\t}\n\t},\n})\n```\n\n--------------------------------\n\n### Mount Better Auth Handler in SolidStart API Route (*auth.ts)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/solid-start.mdx\n\nThis TypeScript code snippet demonstrates how to mount the Better Auth handler within a SolidStart API route. It imports the 'auth' instance and the 'toSolidStartHandler' utility, then exports the GET and POST methods required for handling authentication requests.\n\n```ts\nimport { auth } from \"~/lib/auth\";\nimport { toSolidStartHandler } from \"better-auth/solid-start\";\n\nexport const { GET, POST } = toSolidStartHandler(auth);\n```\n\n--------------------------------\n\n### Configure Global Bearer Token Storage in Auth Client\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/bearer.mdx\n\nThis snippet demonstrates configuring a global `onSuccess` callback within the `createAuthClient`'s `fetchOptions`. It automatically extracts the `set-auth-token` from response headers and stores it in `localStorage` for any successful request, ensuring the token is always up-to-date.\n\n```ts\nexport const authClient = createAuthClient({\n    fetchOptions: {\n        onSuccess: (ctx) => {\n            const authToken = ctx.response.headers.get(\"set-auth-token\") // get the token from the response headers\n            // Store the token securely (e.g., in localStorage)\n            if(authToken){\n              localStorage.setItem(\"bearer_token\", authToken);\n            }\n        }\n    }\n});\n```\n\n--------------------------------\n\n### Configure Better Auth instance for Waku applications\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/waku.mdx\n\nThis code block demonstrates how to initialize the `betterAuth` instance in a Waku application. It sets up the database provider and connection URL, typically sourced from environment variables. Ensure the instance is exported as `auth` or a default export for proper integration.\n\n```typescript\nimport { betterAuth } from \"better-auth\"\n\nexport const auth = betterAuth({\n    database: {\n        provider: \"postgres\", //change this to your database provider\n        url: process.env.DATABASE_URL, // path to your database or connection string\n    }\n})\n```\n\n--------------------------------\n\n### Configure Global Cookie Attributes for Cross-Domain in Better Auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/hono.mdx\n\nThis TypeScript configuration demonstrates how to globally set cookie attributes for Better Auth using `defaultCookieAttributes` within the `createAuth` function. It configures `SameSite=None`, `Secure=true`, and `Partitioned=true` to enable cross-site cookies, which is necessary for certain cross-domain use cases.\n\n```ts\nexport const auth = createAuth({\n  advanced: {\n    defaultCookieAttributes: {\n      sameSite: \"none\",\n      secure: true,\n      partitioned: true // New browser standards will mandate this for foreign cookies\n    }\n  }\n})\n```\n\n--------------------------------\n\n### Create Better Auth Svelte Client Instance\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/svelte-kit.mdx\n\nThis snippet demonstrates how to create an authentication client instance for Svelte applications using `createAuthClient` imported from `better-auth/svelte`. This client can be configured with client-specific settings and is essential for performing client-side authentication operations such as sign-up, sign-in, and managing session state reactively.\n\n```typescript\nimport { createAuthClient } from \"better-auth/svelte\"; // make sure to import from better-auth/svelte\n\nexport const authClient = createAuthClient({\n  // you can pass client configuration here\n});\n```\n\n--------------------------------\n\n### Implement Next.js Middleware for Authentication with auth.api\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/next.mdx\n\nThis TypeScript code demonstrates how to create a Next.js middleware to protect routes by checking user authentication status using `auth.api.getSession`. It imports necessary modules from 'next/server' and 'next/headers', and relies on a custom authentication library at '@/lib/auth'. If a session is not found, the user is redirected to the sign-in page; otherwise, the request proceeds. The middleware is configured to run specifically on the '/dashboard' route using the Node.js runtime, which is required for `auth.api` usage.\n\n```typescript\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { headers } from \"next/headers\";\nimport { auth } from \"@/lib/auth\";\n\nexport async function middleware(request: NextRequest) {\n    const session = await auth.api.getSession({\n        headers: await headers()\n    })\n\n    if(!session) {\n        return NextResponse.redirect(new URL(\"/sign-in\", request.url));\n    }\n\n    return NextResponse.next();\n}\n\nexport const config = {\n  runtime: \"nodejs\",\n  matcher: [\"/dashboard\"] // Apply middleware to specific routes\n};\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/fastify.mdx\n\nDefines an array of trusted origins for the Better Auth instance. This configuration is crucial for security, ensuring that authentication requests are only processed from specified client domains, preventing unauthorized cross-origin access.\n\n```ts\nexport const auth = betterAuth({\n  trustedOrigins: [\"http://localhost:3000\", \"https://example.com\"]\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Backend with Expo Server Plugin (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/packages/expo/README.md\n\nThis TypeScript code demonstrates how to configure your Better Auth backend to include the Expo server plugin. It sets the base URL, adds the `expo()` plugin to handle Expo-specific authentication flows, and configures email/password authentication along with trusted origins for your Expo app's scheme.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { expo } from \"@better-auth/expo\"; // Import the server plugin\n\nexport const auth = betterAuth({\n    // ...your other Better Auth options\n    baseURL: \"http://localhost:8081\", // The base URL of your application server where the routes are mounted.\n    plugins: [expo()], // Add the Expo server plugin\n    emailAndPassword: {\n        enabled: true,\n    },\n    // Add other configurations like trustedOrigins\n    trustedOrigins: [\"myapp://\"] // Replace \"myapp\" with your app's scheme\n});\n```\n\n--------------------------------\n\n### Configure MCP Plugin in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/plugins/mcp.mdx\n\nThis TypeScript code demonstrates how to integrate the MCP plugin into your Better Auth configuration. It imports `betterAuth` and the `mcp` plugin, then initializes `betterAuth` with the `mcp` plugin, specifying the path to your login page. This setup enables your application to act as an OAuth provider for MCP clients.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { mcp } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    plugins: [\n        mcp({\n            loginPage: \"/sign-in\" // path to your login page\n        })\n    ]\n});\n```\n\n--------------------------------\n\n### Configure GitHub Social Provider in Better Auth\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/guides/supabase-migration-guide.mdx\n\nThis TypeScript configuration demonstrates how to add social login providers, specifically GitHub, to your Better Auth setup. It requires `clientId` and `clientSecret` from environment variables, which must be configured for your GitHub OAuth application.\n\n```ts\nimport { admin, anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n    database: new Pool({\n        connectionString: process.env.DATABASE_URL\n    }),\n    emailAndPassword: {\n        enabled: true,\n    },\n    socialProviders: {\n        github: {\n            clientId: process.env.GITHUB_CLIENT_ID,\n            clientSecret: process.env.GITHUB_CLIENT_SECRET,\n        }\n    }\n})\n```\n\n--------------------------------\n\n### Configure VK ID Provider in better-auth (TypeScript)\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/authentication/vk.mdx\n\nThis snippet demonstrates how to configure VK ID as a social authentication provider within the `better-auth` framework. It requires importing `betterAuth` and passing VK ID credentials (client ID and client secret, typically sourced from environment variables) to the `socialProviders` option.\n\n```typescript\nimport { betterAuth } from \"better-auth\";\n\nexport const auth = betterAuth({\n  socialProviders: {\n    vk: {\n      clientId: process.env.VK_CLIENT_ID as string,\n      clientSecret: process.env.VK_CLIENT_SECRET as string,\n    },\n  },\n});\n```\n\n--------------------------------\n\n### Configure Better Auth Trusted Origins\n\nSource: https://github.com/better-auth/better-auth/blob/canary/docs/content/docs/integrations/expo.mdx\n\nThis snippet demonstrates how to configure `trustedOrigins` for the `betterAuth` instance. Trusted origins define the allowed URL schemes for deep linking, supporting basic schemes, environment-specific schemes (production/staging), and wildcard patterns for all paths within a given scheme.\n\n```javascript\nexport const auth = betterAuth({\n    trustedOrigins: [\n        // Basic scheme\n        \"myapp://\", \n        \n        // Production & staging schemes\n        \"myapp-prod://\",\n        \"myapp-staging://\",\n        \n        // Wildcard support for all paths following the scheme\n        \"myapp://*\"\n    ]\n})\n```"
                }
              ]
            }
          },
          "modelMessageId": "472691f1-0abe-4b65-b25a-92ad94ed7d24",
          "responseId": "384b69e0-a0eb-4346-a9b6-48be810cc6f9",
          "sessionId": "00475a58-edf5-4a79-8933-baddb9380e0f",
          "agentId": "github.copilot.editsAgent"
        },
        "details": "Claude Sonnet 4.5 • 1x"
      },
      "responseMarkdownInfo": [
        {
          "suggestionId": "sgt-9a45d4b8-0fc8-4a9b-b9a1-b490a51ebada"
        },
        {
          "suggestionId": "sgt-1eff1766-d238-4a2f-8776-a53318a34a31"
        },
        {
          "suggestionId": "sgt-a12a547f-a81e-4864-a565-88626f81aee3"
        },
        {
          "suggestionId": "sgt-953c8488-86ef-4523-a9d7-36fc6b3ee89f"
        },
        {
          "suggestionId": "sgt-8b94c177-6b7f-41e0-9929-853f967b764a"
        },
        {
          "suggestionId": "sgt-78b7e0c6-412b-479c-852e-a29b95348bfc"
        },
        {
          "suggestionId": "sgt-686443b2-b98c-45aa-9b06-724ead63d951"
        },
        {
          "suggestionId": "sgt-48912abe-ef44-4657-80b6-28295375dc29"
        },
        {
          "suggestionId": "sgt-d958d358-6edd-4a83-b9d3-c7c1ab8d4a2e"
        },
        {
          "suggestionId": "sgt-9348e919-ef52-4d93-a7f2-93907aa92060"
        }
      ],
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "extensionVersion": "0.32.0",
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edit files in your workspace in agent mode",
        "when": "config.chat.agent.enabled",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "panel"
        ],
        "modes": [
          "agent"
        ],
        "slashCommands": [
          {
            "name": "list"
          }
        ],
        "disambiguation": []
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\copilot-instructions.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/copilot-instructions.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/copilot-instructions.md",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\a11y.instructions.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/a11y.instructions.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/a11y.instructions.md",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\codacy.instructions.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/codacy.instructions.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/codacy.instructions.md",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\devops-core-principles.instructions.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/devops-core-principles.instructions.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/devops-core-principles.instructions.md",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\.github\\instructions\\performance-optimization.instructions.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/performance-optimization.instructions.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/.github/instructions/performance-optimization.instructions.md",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "c:\\Users\\MJDesktop\\OneDrive\\Documents\\my-projects-monorepo\\AGENTS.md",
            "_sep": 1,
            "external": "file:///c%3A/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/AGENTS.md",
            "path": "/c:/Users/MJDesktop/OneDrive/Documents/my-projects-monorepo/AGENTS.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1760378778452,
      "modelId": "copilot/claude-sonnet-4.5"
    }
  ]
}